{"time": "2025-06-23 21:47:56", "issue_description": "Set default FILE_UPLOAD_PERMISSION to 0o644.\nDescription\n\t\nHello,\nAs far as I can see, the \u200bFile Uploads documentation page does not mention any permission issues.\nWhat I would like to see is a warning that in absence of explicitly configured FILE_UPLOAD_PERMISSIONS, the permissions for a file uploaded to FileSystemStorage might not be consistent depending on whether a MemoryUploadedFile or a TemporaryUploadedFile was used for temporary storage of the uploaded data (which, with the default FILE_UPLOAD_HANDLERS, in turn depends on the uploaded data size).\nThe tempfile.NamedTemporaryFile + os.rename sequence causes the resulting file permissions to be 0o0600 on some systems (I experience it here on CentOS 7.4.1708 and Python 3.6.5). In all probability, the implementation of Python's built-in tempfile module explicitly sets such permissions for temporary files due to security considerations.\nI found mentions of this issue \u200bon GitHub, but did not manage to find any existing bug report in Django's bug tracker.", "exps": [{"old_test": "", "old_exec_result": "", "old_returncode": "", "old_check_repro": "", "new_test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, MemoryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary files\n    )\n\ndjango.setup()\n\ndef test_file_permissions():\n    \"\"\"Test file upload permissions consistency\"\"\"\n    \n    # Test 1: Small file (uses MemoryUploadedFile)\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Small file upload (MemoryUploadedFile) without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a small file content (less than FILE_UPLOAD_MAX_MEMORY_SIZE)\n        small_content = b\"small file content\"\n        small_file = SimpleUploadedFile(\"small_test.txt\", small_content)\n        \n        # Save the file\n        saved_name = storage.save(\"small_test.txt\", small_file)\n        saved_path = storage.path(saved_name)\n        \n        # Check permissions\n        file_stat = os.stat(saved_path)\n        permissions = oct(file_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"File path: {saved_path}\")\n        \n        # Clean up\n        os.remove(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Large file (uses TemporaryUploadedFile)\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Large file upload (TemporaryUploadedFile) without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a large file content (greater than FILE_UPLOAD_MAX_MEMORY_SIZE)\n        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n        large_file = SimpleUploadedFile(\"large_test.txt\", large_content)\n        \n        # Create a temporary file to simulate TemporaryUploadedFile behavior\n        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n            temp_file.write(large_content)\n            temp_file.flush()\n            \n            temp_uploaded_file = TemporaryUploadedFile(\n                name=\"large_test.txt\",\n                content_type=\"text/plain\",\n                size=len(large_content),\n                charset=None\n            )\n            temp_uploaded_file.file = temp_file\n            temp_uploaded_file.temporary_file_path = temp_file.name\n        \n        # Save the file\n        saved_name = storage.save(\"large_test.txt\", temp_uploaded_file)\n        saved_path = storage.path(saved_name)\n        \n        # Check permissions\n        file_stat = os.stat(saved_path)\n        permissions = oct(file_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"File path: {saved_path}\")\n        \n        # Clean up\n        os.remove(saved_path)\n        if os.path.exists(temp_uploaded_file.temporary_file_path):\n            os.remove(temp_uploaded_file.temporary_file_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: With explicit FILE_UPLOAD_PERMISSIONS set to 0o644\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Test with a temporary file\n            content = b\"test content for permissions\"\n            \n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_file.write(content)\n                temp_file.flush()\n                \n                temp_uploaded_file = TemporaryUploadedFile(\n                    name=\"permission_test.txt\",\n                    content_type=\"text/plain\",\n                    size=len(content),\n                    charset=None\n                )\n                temp_uploaded_file.file = temp_file\n                temp_uploaded_file.temporary_file_path = temp_file.name\n            \n            # Save the file\n            saved_name = storage.save(\"permission_test.txt\", temp_uploaded_file)\n            saved_path = storage.path(saved_name)\n            \n            # Check permissions\n            file_stat = os.stat(saved_path)\n            permissions = oct(file_stat.st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"File path: {saved_path}\")\n            \n            # Clean up\n            os.remove(saved_path)\n            if os.path.exists(temp_uploaded_file.temporary_file_path):\n                os.remove(temp_uploaded_file.temporary_file_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Direct demonstration of tempfile permission issue\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Direct tempfile.NamedTemporaryFile permission demonstration\")\n    \n    try:\n        # Create a temporary file to show its default permissions\n        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n            temp_file.write(b\"temporary file content\")\n            temp_file.flush()\n            \n            temp_path = temp_file.name\n            \n            # Check temp file permissions\n            temp_stat = os.stat(temp_path)\n            temp_permissions = oct(temp_stat.st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Temporary file permissions: {temp_permissions}\")\n            \n            # Simulate os.rename to final location\n            final_path = os.path.join(settings.MEDIA_ROOT, \"renamed_temp_file.txt\")\n            os.rename(temp_path, final_path)\n            \n            # Check final file permissions after rename\n            final_stat = os.stat(final_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Final file permissions after rename: {final_permissions}\")\n            print(f\"Permissions preserved from temporary file: {temp_permissions == final_permissions}\")\n            \n            # Clean up\n            os.remove(final_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "new_exec_result": "\nERROR conda.cli.main_run:execute(33): Subprocess for 'conda run ['python', '/tmp/test-d16wc_u9.py']' command failed.  (See above for error)\nTraceback (most recent call last):\n  File \"/tmp/test-d16wc_u9.py\", line 6, in <module>\n    from django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, MemoryUploadedFile\nImportError: cannot import name 'MemoryUploadedFile'", "new_returncode": 1, "new_check_repro": {"test-analysis": "The script immediately failed with an ImportError for MemoryUploadedFile, indicating it imported a class not present in the current Django environment. As a result, none of the tests ran or printed their input/output blocks. This is unrelated to the file-permissions issue and instead reflects a missing import. Therefore:\n1. It does not print any of the \"### Test N:\" or associated outputs.\n2. It does not exercise any of the intended scenarios, so it neither reproduces the permission discrepancy nor succeeds cleanly.\nHence the script is not correctly structured for the given environment.", "if-reproduce": "NO", "test-advice": "\u2022 Remove the import of MemoryUploadedFile (it\u2019s not available in this Django version).  \n\u2022 For the \u201csmall file\u201d test, using SimpleUploadedFile alone suffices to simulate an in-memory upload\u2014no MemoryUploadedFile class is needed.  \n\u2022 Ensure all imports actually exist in the target Django; limit yourself to SimpleUploadedFile and TemporaryUploadedFile.  \n\u2022 After fixing imports, verify that django.setup() and settings.configure() complete without errors before running the tests.  \n\u2022 Finally, re-run each test block in a try/except and print exactly per the required format."}}, {"old_test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, MemoryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary files\n    )\n\ndjango.setup()\n\ndef test_file_permissions():\n    \"\"\"Test file upload permissions consistency\"\"\"\n    \n    # Test 1: Small file (uses MemoryUploadedFile)\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Small file upload (MemoryUploadedFile) without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a small file content (less than FILE_UPLOAD_MAX_MEMORY_SIZE)\n        small_content = b\"small file content\"\n        small_file = SimpleUploadedFile(\"small_test.txt\", small_content)\n        \n        # Save the file\n        saved_name = storage.save(\"small_test.txt\", small_file)\n        saved_path = storage.path(saved_name)\n        \n        # Check permissions\n        file_stat = os.stat(saved_path)\n        permissions = oct(file_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"File path: {saved_path}\")\n        \n        # Clean up\n        os.remove(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Large file (uses TemporaryUploadedFile)\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Large file upload (TemporaryUploadedFile) without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a large file content (greater than FILE_UPLOAD_MAX_MEMORY_SIZE)\n        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n        large_file = SimpleUploadedFile(\"large_test.txt\", large_content)\n        \n        # Create a temporary file to simulate TemporaryUploadedFile behavior\n        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n            temp_file.write(large_content)\n            temp_file.flush()\n            \n            temp_uploaded_file = TemporaryUploadedFile(\n                name=\"large_test.txt\",\n                content_type=\"text/plain\",\n                size=len(large_content),\n                charset=None\n            )\n            temp_uploaded_file.file = temp_file\n            temp_uploaded_file.temporary_file_path = temp_file.name\n        \n        # Save the file\n        saved_name = storage.save(\"large_test.txt\", temp_uploaded_file)\n        saved_path = storage.path(saved_name)\n        \n        # Check permissions\n        file_stat = os.stat(saved_path)\n        permissions = oct(file_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"File path: {saved_path}\")\n        \n        # Clean up\n        os.remove(saved_path)\n        if os.path.exists(temp_uploaded_file.temporary_file_path):\n            os.remove(temp_uploaded_file.temporary_file_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: With explicit FILE_UPLOAD_PERMISSIONS set to 0o644\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Test with a temporary file\n            content = b\"test content for permissions\"\n            \n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_file.write(content)\n                temp_file.flush()\n                \n                temp_uploaded_file = TemporaryUploadedFile(\n                    name=\"permission_test.txt\",\n                    content_type=\"text/plain\",\n                    size=len(content),\n                    charset=None\n                )\n                temp_uploaded_file.file = temp_file\n                temp_uploaded_file.temporary_file_path = temp_file.name\n            \n            # Save the file\n            saved_name = storage.save(\"permission_test.txt\", temp_uploaded_file)\n            saved_path = storage.path(saved_name)\n            \n            # Check permissions\n            file_stat = os.stat(saved_path)\n            permissions = oct(file_stat.st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"File path: {saved_path}\")\n            \n            # Clean up\n            os.remove(saved_path)\n            if os.path.exists(temp_uploaded_file.temporary_file_path):\n                os.remove(temp_uploaded_file.temporary_file_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Direct demonstration of tempfile permission issue\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Direct tempfile.NamedTemporaryFile permission demonstration\")\n    \n    try:\n        # Create a temporary file to show its default permissions\n        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n            temp_file.write(b\"temporary file content\")\n            temp_file.flush()\n            \n            temp_path = temp_file.name\n            \n            # Check temp file permissions\n            temp_stat = os.stat(temp_path)\n            temp_permissions = oct(temp_stat.st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Temporary file permissions: {temp_permissions}\")\n            \n            # Simulate os.rename to final location\n            final_path = os.path.join(settings.MEDIA_ROOT, \"renamed_temp_file.txt\")\n            os.rename(temp_path, final_path)\n            \n            # Check final file permissions after rename\n            final_stat = os.stat(final_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Final file permissions after rename: {final_permissions}\")\n            print(f\"Permissions preserved from temporary file: {temp_permissions == final_permissions}\")\n            \n            # Clean up\n            os.remove(final_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "old_exec_result": "\nERROR conda.cli.main_run:execute(33): Subprocess for 'conda run ['python', '/tmp/test-d16wc_u9.py']' command failed.  (See above for error)\nTraceback (most recent call last):\n  File \"/tmp/test-d16wc_u9.py\", line 6, in <module>\n    from django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, MemoryUploadedFile\nImportError: cannot import name 'MemoryUploadedFile'", "old_returncode": 1, "old_check_repro": {"test-analysis": "The script immediately failed with an ImportError for MemoryUploadedFile, indicating it imported a class not present in the current Django environment. As a result, none of the tests ran or printed their input/output blocks. This is unrelated to the file-permissions issue and instead reflects a missing import. Therefore:\n1. It does not print any of the \"### Test N:\" or associated outputs.\n2. It does not exercise any of the intended scenarios, so it neither reproduces the permission discrepancy nor succeeds cleanly.\nHence the script is not correctly structured for the given environment.", "if-reproduce": "NO", "test-advice": "\u2022 Remove the import of MemoryUploadedFile (it\u2019s not available in this Django version).  \n\u2022 For the \u201csmall file\u201d test, using SimpleUploadedFile alone suffices to simulate an in-memory upload\u2014no MemoryUploadedFile class is needed.  \n\u2022 Ensure all imports actually exist in the target Django; limit yourself to SimpleUploadedFile and TemporaryUploadedFile.  \n\u2022 After fixing imports, verify that django.setup() and settings.configure() complete without errors before running the tests.  \n\u2022 Finally, re-run each test block in a try/except and print exactly per the required format."}, "new_test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n    )\n\ndjango.setup()\n\ndef test_file_permissions():\n    \"\"\"Test file upload permissions consistency\"\"\"\n    \n    # Test 1: SimpleUploadedFile (in-memory file upload)\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"SimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a simple uploaded file\n        content = b\"simple file content\"\n        uploaded_file = SimpleUploadedFile(\"simple_test.txt\", content, content_type=\"text/plain\")\n        \n        # Save the file\n        saved_name = storage.save(\"simple_test.txt\", uploaded_file)\n        saved_path = storage.path(saved_name)\n        \n        # Check permissions\n        file_stat = os.stat(saved_path)\n        permissions = oct(file_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"File exists: {os.path.exists(saved_path)}\")\n        \n        # Clean up\n        if os.path.exists(saved_path):\n            os.remove(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: TemporaryUploadedFile (temporary file upload)\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a temporary file first\n        content = b\"temporary file content\"\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(content)\n        temp_file.close()\n        \n        # Check temp file permissions\n        temp_stat = os.stat(temp_file.name)\n        temp_permissions = oct(temp_stat.st_mode & 0o777)\n        \n        # Create TemporaryUploadedFile\n        temp_uploaded_file = TemporaryUploadedFile(\n            name=\"temp_test.txt\",\n            content_type=\"text/plain\",\n            size=len(content),\n            charset=None\n        )\n        \n        # Manually set the temporary file path\n        temp_uploaded_file._file = open(temp_file.name, 'rb')\n        temp_uploaded_file.temporary_file_path = temp_file.name\n        \n        # Save the file\n        saved_name = storage.save(\"temp_test.txt\", temp_uploaded_file)\n        saved_path = storage.path(saved_name)\n        \n        # Check final permissions\n        file_stat = os.stat(saved_path)\n        final_permissions = oct(file_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Permissions match: {temp_permissions == final_permissions}\")\n        \n        # Clean up\n        temp_uploaded_file.close()\n        if os.path.exists(saved_path):\n            os.remove(saved_path)\n        if os.path.exists(temp_file.name):\n            os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: With explicit FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Create a temporary file\n            content = b\"permission test content\"\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(content)\n            temp_file.close()\n            \n            # Check temp file permissions\n            temp_stat = os.stat(temp_file.name)\n            temp_permissions = oct(temp_stat.st_mode & 0o777)\n            \n            # Create TemporaryUploadedFile\n            temp_uploaded_file = TemporaryUploadedFile(\n                name=\"permission_test.txt\",\n                content_type=\"text/plain\",\n                size=len(content),\n                charset=None\n            )\n            \n            temp_uploaded_file._file = open(temp_file.name, 'rb')\n            temp_uploaded_file.temporary_file_path = temp_file.name\n            \n            # Save the file\n            saved_name = storage.save(\"permission_test.txt\", temp_uploaded_file)\n            saved_path = storage.path(saved_name)\n            \n            # Check final permissions\n            file_stat = os.stat(saved_path)\n            final_permissions = oct(file_stat.st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Temp file permissions: {temp_permissions}\")\n            print(f\"Final file permissions: {final_permissions}\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Matches expected: {final_permissions == '0o644'}\")\n            \n            # Clean up\n            temp_uploaded_file.close()\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(temp_file.name):\n                os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Direct demonstration of tempfile permission issue\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Direct tempfile.NamedTemporaryFile permission demonstration\")\n    \n    try:\n        # Create a regular file\n        regular_file_path = os.path.join(settings.MEDIA_ROOT, \"regular_file.txt\")\n        with open(regular_file_path, 'w') as f:\n            f.write(\"regular file\")\n        \n        regular_stat = os.stat(regular_file_path)\n        regular_permissions = oct(regular_stat.st_mode & 0o777)\n        \n        # Create a temporary file\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(b\"temp file\")\n        temp_file.close()\n        \n        temp_stat = os.stat(temp_file.name)\n        temp_permissions = oct(temp_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Regular file permissions: {regular_permissions}\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Permissions different: {regular_permissions != temp_permissions}\")\n        \n        # Clean up\n        os.remove(regular_file_path)\n        os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "new_exec_result": "### Test 1:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nFile permissions: 0o664\nFile exists: True\n\n### Test 2:\nInput:\nTemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nError: 'str' object is not callable\n\n### Test 3:\nInput:\nTemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nError: 'str' object is not callable\n\n### Test 4:\nInput:\nDirect tempfile.NamedTemporaryFile permission demonstration\nOutput:\nRegular file permissions: 0o664\nTemp file permissions: 0o600\nPermissions different: True\n", "new_returncode": 0, "new_check_repro": {"test-analysis": "The script does print each \u201c### Test N:\u201d header, the \u201cInput:\u201d description and captures an \u201cOutput:\u201d block for every test, so the reporting of inputs and outputs is clear. However, Tests 2 and 3 both crash with the unrelated TypeError \u201c\u2018str\u2019 object is not callable,\u201d which is not the permission\u2010inconsistency bug we wanted to expose but instead a misuse of TemporaryUploadedFile\u2019s API. Tests 2 and 3 therefore do not reach the storage.save call in a meaningful way and fail on a test\u2010script bug. Test 1 and Test 4 correctly run and expose the differing permission bits (0o664 vs. 0o600), which matches the documented issue. Test 3 (with FILE_UPLOAD_PERMISSIONS) also never executes properly due to the same API error. Thus, while the script\u2019s output formatting is fine, two of the four tests fail for the wrong reason.", "if-reproduce": "NO", "test-advice": "\u2013 Fix the TemporaryUploadedFile usage so that it actually wraps the on\u2010disk temp file rather than rebinding temporary_file_path to a string. For example, you can subclass or monkey-patch TemporaryUploadedFile to accept a file path, or call its internal constructor properly:\n\n    temp_uploaded = TemporaryUploadedFile(\n        'name.txt', 'text/plain', size, None,\n        file=open(temp_path, 'rb')\n    )\n\n\u2013 Alternatively, drop Tests 2 and 3 and replace them with a Django test Client POST to a view using FileSystemStorage so that Django\u2019s upload handlers produce TemporaryUploadedFile under the hood. This will let you save it through storage.save and observe the permissions change without manually constructing TemporaryUploadedFile.\n\n\u2013 Ensure override_settings is used as a context manager (imported from django.test.utils) and that storage = FileSystemStorage() picks up the changed setting.\n\nBy correcting the way TemporaryUploadedFile is instantiated (or by using the test Client to drive a real upload), Tests 2 and 3 will exercise the code paths and expose the intended permission inconsistency rather than crashing on a scripting error."}}, {"old_test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n    )\n\ndjango.setup()\n\ndef test_file_permissions():\n    \"\"\"Test file upload permissions consistency\"\"\"\n    \n    # Test 1: SimpleUploadedFile (in-memory file upload)\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"SimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a simple uploaded file\n        content = b\"simple file content\"\n        uploaded_file = SimpleUploadedFile(\"simple_test.txt\", content, content_type=\"text/plain\")\n        \n        # Save the file\n        saved_name = storage.save(\"simple_test.txt\", uploaded_file)\n        saved_path = storage.path(saved_name)\n        \n        # Check permissions\n        file_stat = os.stat(saved_path)\n        permissions = oct(file_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"File exists: {os.path.exists(saved_path)}\")\n        \n        # Clean up\n        if os.path.exists(saved_path):\n            os.remove(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: TemporaryUploadedFile (temporary file upload)\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a temporary file first\n        content = b\"temporary file content\"\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(content)\n        temp_file.close()\n        \n        # Check temp file permissions\n        temp_stat = os.stat(temp_file.name)\n        temp_permissions = oct(temp_stat.st_mode & 0o777)\n        \n        # Create TemporaryUploadedFile\n        temp_uploaded_file = TemporaryUploadedFile(\n            name=\"temp_test.txt\",\n            content_type=\"text/plain\",\n            size=len(content),\n            charset=None\n        )\n        \n        # Manually set the temporary file path\n        temp_uploaded_file._file = open(temp_file.name, 'rb')\n        temp_uploaded_file.temporary_file_path = temp_file.name\n        \n        # Save the file\n        saved_name = storage.save(\"temp_test.txt\", temp_uploaded_file)\n        saved_path = storage.path(saved_name)\n        \n        # Check final permissions\n        file_stat = os.stat(saved_path)\n        final_permissions = oct(file_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Permissions match: {temp_permissions == final_permissions}\")\n        \n        # Clean up\n        temp_uploaded_file.close()\n        if os.path.exists(saved_path):\n            os.remove(saved_path)\n        if os.path.exists(temp_file.name):\n            os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: With explicit FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Create a temporary file\n            content = b\"permission test content\"\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(content)\n            temp_file.close()\n            \n            # Check temp file permissions\n            temp_stat = os.stat(temp_file.name)\n            temp_permissions = oct(temp_stat.st_mode & 0o777)\n            \n            # Create TemporaryUploadedFile\n            temp_uploaded_file = TemporaryUploadedFile(\n                name=\"permission_test.txt\",\n                content_type=\"text/plain\",\n                size=len(content),\n                charset=None\n            )\n            \n            temp_uploaded_file._file = open(temp_file.name, 'rb')\n            temp_uploaded_file.temporary_file_path = temp_file.name\n            \n            # Save the file\n            saved_name = storage.save(\"permission_test.txt\", temp_uploaded_file)\n            saved_path = storage.path(saved_name)\n            \n            # Check final permissions\n            file_stat = os.stat(saved_path)\n            final_permissions = oct(file_stat.st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Temp file permissions: {temp_permissions}\")\n            print(f\"Final file permissions: {final_permissions}\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Matches expected: {final_permissions == '0o644'}\")\n            \n            # Clean up\n            temp_uploaded_file.close()\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(temp_file.name):\n                os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Direct demonstration of tempfile permission issue\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Direct tempfile.NamedTemporaryFile permission demonstration\")\n    \n    try:\n        # Create a regular file\n        regular_file_path = os.path.join(settings.MEDIA_ROOT, \"regular_file.txt\")\n        with open(regular_file_path, 'w') as f:\n            f.write(\"regular file\")\n        \n        regular_stat = os.stat(regular_file_path)\n        regular_permissions = oct(regular_stat.st_mode & 0o777)\n        \n        # Create a temporary file\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(b\"temp file\")\n        temp_file.close()\n        \n        temp_stat = os.stat(temp_file.name)\n        temp_permissions = oct(temp_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Regular file permissions: {regular_permissions}\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Permissions different: {regular_permissions != temp_permissions}\")\n        \n        # Clean up\n        os.remove(regular_file_path)\n        os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "old_exec_result": "### Test 1:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nFile permissions: 0o664\nFile exists: True\n\n### Test 2:\nInput:\nTemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nError: 'str' object is not callable\n\n### Test 3:\nInput:\nTemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nError: 'str' object is not callable\n\n### Test 4:\nInput:\nDirect tempfile.NamedTemporaryFile permission demonstration\nOutput:\nRegular file permissions: 0o664\nTemp file permissions: 0o600\nPermissions different: True\n", "old_returncode": 0, "old_check_repro": {"test-analysis": "The script does print each \u201c### Test N:\u201d header, the \u201cInput:\u201d description and captures an \u201cOutput:\u201d block for every test, so the reporting of inputs and outputs is clear. However, Tests 2 and 3 both crash with the unrelated TypeError \u201c\u2018str\u2019 object is not callable,\u201d which is not the permission\u2010inconsistency bug we wanted to expose but instead a misuse of TemporaryUploadedFile\u2019s API. Tests 2 and 3 therefore do not reach the storage.save call in a meaningful way and fail on a test\u2010script bug. Test 1 and Test 4 correctly run and expose the differing permission bits (0o664 vs. 0o600), which matches the documented issue. Test 3 (with FILE_UPLOAD_PERMISSIONS) also never executes properly due to the same API error. Thus, while the script\u2019s output formatting is fine, two of the four tests fail for the wrong reason.", "if-reproduce": "NO", "test-advice": "\u2013 Fix the TemporaryUploadedFile usage so that it actually wraps the on\u2010disk temp file rather than rebinding temporary_file_path to a string. For example, you can subclass or monkey-patch TemporaryUploadedFile to accept a file path, or call its internal constructor properly:\n\n    temp_uploaded = TemporaryUploadedFile(\n        'name.txt', 'text/plain', size, None,\n        file=open(temp_path, 'rb')\n    )\n\n\u2013 Alternatively, drop Tests 2 and 3 and replace them with a Django test Client POST to a view using FileSystemStorage so that Django\u2019s upload handlers produce TemporaryUploadedFile under the hood. This will let you save it through storage.save and observe the permissions change without manually constructing TemporaryUploadedFile.\n\n\u2013 Ensure override_settings is used as a context manager (imported from django.test.utils) and that storage = FileSystemStorage() picks up the changed setting.\n\nBy correcting the way TemporaryUploadedFile is instantiated (or by using the test Client to drive a real upload), Tests 2 and 3 will exercise the code paths and expose the intended permission inconsistency rather than crashing on a scripting error."}, "new_test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n    )\n\ndjango.setup()\n\ndef test_file_permissions():\n    \"\"\"Test file upload permissions consistency\"\"\"\n    \n    # Test 1: Regular file creation (baseline)\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Regular file creation to show baseline permissions\")\n    \n    try:\n        regular_file_path = os.path.join(settings.MEDIA_ROOT, \"regular_file.txt\")\n        with open(regular_file_path, 'w') as f:\n            f.write(\"regular file content\")\n        \n        regular_stat = os.stat(regular_file_path)\n        regular_permissions = oct(regular_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Regular file permissions: {regular_permissions}\")\n        \n        # Clean up\n        os.remove(regular_file_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Tempfile permissions (shows the root cause)\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"NamedTemporaryFile creation to show restrictive permissions\")\n    \n    try:\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(b\"temp file content\")\n        temp_file.close()\n        \n        temp_stat = os.stat(temp_file.name)\n        temp_permissions = oct(temp_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        \n        # Clean up\n        os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: Simulate Django's TemporaryUploadedFile behavior without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Simulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a temp file with restrictive permissions (simulating Django's behavior)\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        content = b\"simulated temporary upload content\"\n        temp_file.write(content)\n        temp_file.close()\n        \n        temp_stat = os.stat(temp_file.name)\n        temp_permissions = oct(temp_stat.st_mode & 0o777)\n        \n        # Create a custom file-like object that simulates TemporaryUploadedFile\n        class MockTemporaryUploadedFile:\n            def __init__(self, temp_path, name):\n                self.temporary_file_path = temp_path\n                self.name = name\n                self._file = open(temp_path, 'rb')\n            \n            def read(self, size=-1):\n                return self._file.read(size)\n            \n            def close(self):\n                self._file.close()\n        \n        mock_uploaded_file = MockTemporaryUploadedFile(temp_file.name, \"temp_upload.txt\")\n        \n        # Save through FileSystemStorage (this will use os.rename, preserving permissions)\n        saved_name = storage.save(\"temp_upload.txt\", mock_uploaded_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Permissions preserved from temp: {temp_permissions == final_permissions}\")\n        \n        # Clean up\n        mock_uploaded_file.close()\n        if os.path.exists(saved_path):\n            os.remove(saved_path)\n        if os.path.exists(temp_file.name):\n            os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: With explicit FILE_UPLOAD_PERMISSIONS setting\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Simulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Create a temp file with restrictive permissions\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            content = b\"permission test content\"\n            temp_file.write(content)\n            temp_file.close()\n            \n            temp_stat = os.stat(temp_file.name)\n            temp_permissions = oct(temp_stat.st_mode & 0o777)\n            \n            # Create mock file object\n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_uploaded_file = MockTemporaryUploadedFile(temp_file.name, \"permission_test.txt\")\n            \n            # Save through FileSystemStorage\n            saved_name = storage.save(\"permission_test.txt\", mock_uploaded_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Temp file permissions: {temp_permissions}\")\n            print(f\"Final file permissions: {final_permissions}\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Correctly set to expected: {final_permissions == '0o644'}\")\n            \n            # Clean up\n            mock_uploaded_file.close()\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(temp_file.name):\n                os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: SimpleUploadedFile for comparison (in-memory, no temp file)\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"SimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        content = b\"simple upload content\"\n        simple_file = SimpleUploadedFile(\"simple_upload.txt\", content, content_type=\"text/plain\")\n        \n        # Save through FileSystemStorage\n        saved_name = storage.save(\"simple_upload.txt\", simple_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"SimpleUploadedFile final permissions: {final_permissions}\")\n        print(f\"No temp file involved - uses default file creation permissions\")\n        \n        # Clean up\n        if os.path.exists(saved_path):\n            os.remove(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "new_exec_result": "### Test 1:\nInput:\nRegular file creation to show baseline permissions\nOutput:\nRegular file permissions: 0o664\n\n### Test 2:\nInput:\nNamedTemporaryFile creation to show restrictive permissions\nOutput:\nTemp file permissions: 0o600\n\n### Test 3:\nInput:\nSimulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o664\nPermissions preserved from temp: False\n\n### Test 4:\nInput:\nSimulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nExpected permissions: 0o644\nCorrectly set to expected: True\n\n### Test 5:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\nOutput:\nSimpleUploadedFile final permissions: 0o664\nNo temp file involved - uses default file creation permissions\n", "new_returncode": 0, "new_check_repro": {"test-analysis": "The script cleanly prints each \u201c### Test N:\u201d header, shows the Input description, and prints the Output (either a permission value or an error). None of the tests crash or raise unrelated exceptions. \n\nTest 1 shows the baseline file\u2010creation permissions (0o664), Test 2 shows that NamedTemporaryFile defaults to 0o600, Test 3 demonstrates that, when saving the temporary file through FileSystemStorage without FILE_UPLOAD_PERMISSIONS set, the final file ends up with the \u201cnormal\u201d umask\u2010derived mode (0o664), thus exposing the mismatch between the temp file\u2019s 0o600 and the saved file\u2019s 0o664. Test 4 confirms that setting FILE_UPLOAD_PERMISSIONS to 0o644 forces the correct final mode, and Test 5 shows that in\u2010memory uploads likewise end up at 0o664. All outputs are exactly what the tests intend to demonstrate: the inconsistent or correct behavior of file permissions under different configurations.", "if-reproduce": "YES", "test-advice": ""}}]}
