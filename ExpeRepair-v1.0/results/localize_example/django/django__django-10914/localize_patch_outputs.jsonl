{"instance_id": "django__django-10914", "bug_locs": [[{"rel_file_path": "django/conf/global_settings.py", "abs_file_path": "/home/elloworl/Projects/PycharmProjects/SWE/SWE-bench-ACR/lite_testbed/django__django/setup_django__django__3.0/django/conf/global_settings.py", "start": 294, "end": 317, "class_name": null, "method_name": null, "code": "294 DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n295 \n296 # Maximum number of GET/POST parameters that will be read before a\n297 # SuspiciousOperation (TooManyFieldsSent) is raised.\n298 DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n299 \n300 # Directory in which upload streamed files will be temporarily saved. A value of\n301 # `None` will make Django use the operating system's default temporary directory\n302 # (i.e. \"/tmp\" on *nix systems).\n303 FILE_UPLOAD_TEMP_DIR = None\n304 \n305 # The numeric mode to set newly-uploaded files to. The value should be a mode\n306 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n307 FILE_UPLOAD_PERMISSIONS = None\n308 \n309 # The numeric mode to assign to newly-created directories, when uploading files.\n310 # The value should be a mode as you'd pass to os.chmod;\n311 # see https://docs.python.org/library/os.html#files-and-directories.\n312 FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\n313 \n314 # Python module path where user will place custom format definition.\n315 # The directory where this setting is pointing should contain subdirectories\n316 # named as the locales, containing a formats.py file\n317 # (i.e. \"myproject.locale\" for myproject/locale/en/formats.py etc. use)\n", "intended_behavior": ""}, {"rel_file_path": "django/core/files/storage.py", "abs_file_path": "/home/elloworl/Projects/PycharmProjects/SWE/SWE-bench-ACR/lite_testbed/django__django/setup_django__django__3.0/django/core/files/storage.py", "start": 168, "end": 193, "class_name": "FileSystemStorage", "method_name": "__init__", "code": "168 \n169 @deconstructible\n170 class FileSystemStorage(Storage):\n171     \"\"\"\n172     Standard filesystem storage\n173     \"\"\"\n174     # The combination of O_CREAT and O_EXCL makes os.open() raise OSError if\n175     # the file already exists before it's opened.\n176     OS_OPEN_FLAGS = os.O_WRONLY | os.O_CREAT | os.O_EXCL | getattr(os, 'O_BINARY', 0)\n177 \n178     def __init__(self, location=None, base_url=None, file_permissions_mode=None,\n179                  directory_permissions_mode=None):\n180         self._location = location\n181         self._base_url = base_url\n182         self._file_permissions_mode = file_permissions_mode\n183         self._directory_permissions_mode = directory_permissions_mode\n184         setting_changed.connect(self._clear_cached_properties)\n185 \n186     def _clear_cached_properties(self, setting, **kwargs):\n187         \"\"\"Reset setting based property values.\"\"\"\n188         if setting == 'MEDIA_ROOT':\n189             self.__dict__.pop('base_location', None)\n190             self.__dict__.pop('location', None)\n191         elif setting == 'MEDIA_URL':\n192             self.__dict__.pop('base_url', None)\n193         elif setting == 'FILE_UPLOAD_PERMISSIONS':\n", "intended_behavior": ""}, {"rel_file_path": "django/core/files/storage.py", "abs_file_path": "/home/elloworl/Projects/PycharmProjects/SWE/SWE-bench-ACR/lite_testbed/django__django/setup_django__django__3.0/django/core/files/storage.py", "start": 204, "end": 227, "class_name": "FileSystemStorage", "method_name": "file_permissions_mode", "code": "204 \n205     @cached_property\n206     def location(self):\n207         return os.path.abspath(self.base_location)\n208 \n209     @cached_property\n210     def base_url(self):\n211         if self._base_url is not None and not self._base_url.endswith('/'):\n212             self._base_url += '/'\n213         return self._value_or_setting(self._base_url, settings.MEDIA_URL)\n214 \n215     @cached_property\n216     def file_permissions_mode(self):\n217         return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)\n218 \n219     @cached_property\n220     def directory_permissions_mode(self):\n221         return self._value_or_setting(self._directory_permissions_mode, settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS)\n222 \n223     def _open(self, name, mode='rb'):\n224         return File(open(self.path(name), mode))\n225 \n226     def _save(self, name, content):\n227         full_path = self.path(name)\n", "intended_behavior": ""}, {"rel_file_path": "django/core/files/storage.py", "abs_file_path": "/home/elloworl/Projects/PycharmProjects/SWE/SWE-bench-ACR/lite_testbed/django__django/setup_django__django__3.0/django/core/files/storage.py", "start": 241, "end": 296, "class_name": "FileSystemStorage", "method_name": "_save", "code": "241                 os.makedirs(directory, exist_ok=True)\n242         except FileExistsError:\n243             raise FileExistsError('%s exists and is not a directory.' % directory)\n244 \n245         # There's a potential race condition between get_available_name and\n246         # saving the file; it's possible that two threads might return the\n247         # same name, at which point all sorts of fun happens. So we need to\n248         # try to create the file, but if it already exists we have to go back\n249         # to get_available_name() and try again.\n250 \n251         while True:\n252             try:\n253                 # This file has a file path that we can move.\n254                 if hasattr(content, 'temporary_file_path'):\n255                     file_move_safe(content.temporary_file_path(), full_path)\n256 \n257                 # This is a normal uploadedfile that we can stream.\n258                 else:\n259                     # The current umask value is masked out by os.open!\n260                     fd = os.open(full_path, self.OS_OPEN_FLAGS, 0o666)\n261                     _file = None\n262                     try:\n263                         locks.lock(fd, locks.LOCK_EX)\n264                         for chunk in content.chunks():\n265                             if _file is None:\n266                                 mode = 'wb' if isinstance(chunk, bytes) else 'wt'\n267                                 _file = os.fdopen(fd, mode)\n268                             _file.write(chunk)\n269                     finally:\n270                         locks.unlock(fd)\n271                         if _file is not None:\n272                             _file.close()\n273                         else:\n274                             os.close(fd)\n275             except FileExistsError:\n276                 # A new name is needed if the file exists.\n277                 name = self.get_available_name(name)\n278                 full_path = self.path(name)\n279             else:\n280                 # OK, the file save worked. Break out of the loop.\n281                 break\n282 \n283         if self.file_permissions_mode is not None:\n284             os.chmod(full_path, self.file_permissions_mode)\n285 \n286         # Store filenames with forward slashes, even on Windows.\n287         return name.replace('\\\\', '/')\n288 \n289     def delete(self, name):\n290         assert name, \"The name argument is not allowed to be empty.\"\n291         name = self.path(name)\n292         # If the file or directory exists, delete it from the filesystem.\n293         try:\n294             if os.path.isdir(name):\n295                 os.rmdir(name)\n296             else:\n", "intended_behavior": ""}]]}
