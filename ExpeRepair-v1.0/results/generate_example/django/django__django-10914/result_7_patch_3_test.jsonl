{"patch_content": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n", "repro_stdout": "### Test 1:\nInput:\nRegular file creation to show baseline permissions\nOutput:\nRegular file permissions: 0o664\n\n### Test 2:\nInput:\nNamedTemporaryFile creation to show restrictive permissions\nOutput:\nTemp file permissions: 0o600\n\n### Test 3:\nInput:\nSimulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nPermissions preserved from temp: False\n\n### Test 4:\nInput:\nSimulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nExpected permissions: 0o644\nCorrectly set to expected: True\n\n### Test 5:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\nOutput:\nSimpleUploadedFile final permissions: 0o644\nNo temp file involved - uses default file creation permissions\n\n", "repro_stderr": "", "differential_test": [{"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, InMemoryUploadedFile\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nfrom django.test.utils import override_settings\nfrom io import BytesIO\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5MB default\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely remove files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef get_file_permissions(filepath):\n    \"\"\"Helper to get file permissions\"\"\"\n    try:\n        stat_info = os.stat(filepath)\n        return oct(stat_info.st_mode & 0o777)\n    except:\n        return \"N/A\"\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Small file upload (in-memory) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Small file upload (512 bytes) - should use InMemoryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        small_content = b\"x\" * 512  # Small file, should stay in memory\n        small_file = SimpleUploadedFile(\"small_file.txt\", small_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"small_test.txt\", small_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Upload type: InMemoryUploadedFile (small)\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Large file upload (temporary file) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Large file upload (3MB) - should use TemporaryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        large_content = b\"x\" * (3 * 1024 * 1024)  # 3MB file, should go to temp file\n        large_file = SimpleUploadedFile(\"large_file.txt\", large_content, content_type=\"text/plain\")\n        \n        # Simulate what happens with TemporaryUploadedFile\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        temp_permissions = get_file_permissions(temp_file.name)\n        \n        # Now save it through storage\n        with open(temp_file.name, 'rb') as f:\n            saved_name = storage.save(\"large_test.txt\", f)\n            saved_path = storage.path(saved_name)\n        \n        final_permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Upload type: TemporaryUploadedFile (large)\")\n        \n        cleanup_file(temp_file.name)\n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: FILE_UPLOAD_PERMISSIONS set to 0o644\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            content = b\"test content with permissions\"\n            test_file = SimpleUploadedFile(\"perm_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"perm_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: FILE_UPLOAD_PERMISSIONS set to 0o600 (restrictive)\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            content = b\"restrictive permissions test\"\n            test_file = SimpleUploadedFile(\"restrictive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"restrictive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o600\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: FILE_UPLOAD_PERMISSIONS set to 0o755 (permissive)\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            content = b\"permissive permissions test\"\n            test_file = SimpleUploadedFile(\"permissive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"permissive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o755\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: Empty file upload\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Empty file upload - edge case\")\n    \n    try:\n        storage = FileSystemStorage()\n        empty_content = b\"\"\n        empty_file = SimpleUploadedFile(\"empty_file.txt\", empty_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"empty_test.txt\", empty_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Empty file handled successfully: {file_size == 0}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Binary file upload\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Binary file upload (simulated image data)\")\n    \n    try:\n        storage = FileSystemStorage()\n        # Simulate binary image data\n        binary_content = bytes([i % 256 for i in range(1024)])  # 1KB of binary data\n        binary_file = SimpleUploadedFile(\"test_image.jpg\", binary_content, content_type=\"image/jpeg\")\n        \n        saved_name = storage.save(\"binary_test.jpg\", binary_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Content type: image/jpeg\")\n        print(f\"Binary file handled successfully: {file_size == 1024}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Consistency test between small and large files\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Consistency test: comparing permissions between small and large files\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Small file\n            small_content = b\"small\" * 100  # 500 bytes\n            small_file = SimpleUploadedFile(\"small_consistency.txt\", small_content, content_type=\"text/plain\")\n            small_saved = storage.save(\"small_consistency.txt\", small_file)\n            small_path = storage.path(small_saved)\n            small_permissions = get_file_permissions(small_path)\n            \n            # Large file (simulated temporary file behavior)\n            large_content = b\"large\" * 100000  # ~500KB\n            large_file = SimpleUploadedFile(\"large_consistency.txt\", large_content, content_type=\"text/plain\")\n            large_saved = storage.save(\"large_consistency.txt\", large_file)\n            large_path = storage.path(large_saved)\n            large_permissions = get_file_permissions(large_path)\n            \n            print(\"Output:\")\n            print(f\"Small file permissions: {small_permissions}\")\n            print(f\"Large file permissions: {large_permissions}\")\n            print(f\"Permissions are consistent: {small_permissions == large_permissions}\")\n            print(f\"Both match expected 0o644: {small_permissions == '0o644' and large_permissions == '0o644'}\")\n            \n            cleanup_file(small_path)\n            cleanup_file(large_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nSmall file upload (512 bytes) - should use InMemoryUploadedFile\nOutput:\nFile size: 512 bytes\nFile permissions: 0o644\nUpload type: InMemoryUploadedFile (small)\n\n### Test 2:\nInput:\nLarge file upload (3MB) - should use TemporaryUploadedFile\nOutput:\nFile size: 3145728 bytes\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nUpload type: TemporaryUploadedFile (large)\n\n### Test 3:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nExpected permissions: 0o644\nActual permissions: 0o644\nPermissions match expected: True\n\n### Test 4:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\nOutput:\nExpected permissions: 0o600\nActual permissions: 0o600\nPermissions match expected: True\n\n### Test 5:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\nOutput:\nExpected permissions: 0o755\nActual permissions: 0o755\nPermissions match expected: True\n\n### Test 6:\nInput:\nEmpty file upload - edge case\nOutput:\nFile size: 0 bytes\nFile permissions: 0o644\nEmpty file handled successfully: True\n\n### Test 7:\nInput:\nBinary file upload (simulated image data)\nOutput:\nFile size: 1024 bytes\nFile permissions: 0o644\nContent type: image/jpeg\nBinary file handled successfully: True\n\n### Test 8:\nInput:\nConsistency test: comparing permissions between small and large files\nOutput:\nSmall file permissions: 0o644\nLarge file permissions: 0o644\nPermissions are consistent: True\nBoth match expected 0o644: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nimport django\nfrom io import BytesIO\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5 MB default\n    )\n\ndjango.setup()\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Default behavior - no FILE_UPLOAD_PERMISSIONS setting\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default behavior without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Small file (uses SimpleUploadedFile/MemoryFileUploadHandler)\n        small_content = b\"small file content\"\n        small_file = SimpleUploadedFile(\"small.txt\", small_content)\n        small_saved = storage.save(\"small.txt\", small_file)\n        small_path = storage.path(small_saved)\n        small_perms = oct(os.stat(small_path).st_mode & 0o777)\n        \n        # Large file simulation (uses TemporaryUploadedFile)\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        large_content = b\"large file content\" * 1000\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        with open(temp_file.name, 'rb') as f:\n            temp_upload = TemporaryUploadedFile(\"large.txt\", \"text/plain\", len(large_content), \"utf-8\")\n            temp_upload.file = f\n            temp_upload.temporary_file_path = temp_file.name\n            large_saved = storage.save(\"large.txt\", temp_upload)\n            large_path = storage.path(large_saved)\n            large_perms = oct(os.stat(large_path).st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Small file permissions: {small_perms}\")\n        print(f\"Large file permissions: {large_perms}\")\n        print(f\"Permissions consistent: {small_perms == large_perms}\")\n        \n        # Cleanup\n        for path in [small_path, large_path, temp_file.name]:\n            if os.path.exists(path):\n                os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Explicit FILE_UPLOAD_PERMISSIONS=0o644\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 644 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test644.txt\", content)\n            saved_name = storage.save(\"test644.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Correct: {permissions == '0o644'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: Restrictive permissions FILE_UPLOAD_PERMISSIONS=0o600\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test with restrictive FILE_UPLOAD_PERMISSIONS=0o600\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 600 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test600.txt\", content)\n            saved_name = storage.save(\"test600.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o600\")\n            print(f\"Correct: {permissions == '0o600'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Permissive permissions FILE_UPLOAD_PERMISSIONS=0o666\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test with permissive FILE_UPLOAD_PERMISSIONS=0o666\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o666):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 666 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test666.txt\", content)\n            saved_name = storage.save(\"test666.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o666\")\n            print(f\"Correct: {permissions == '0o666'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: File size threshold testing - small file under memory limit\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # File smaller than threshold (should use memory handler)\n            small_content = b\"x\" * 512  # 512 bytes < 1024\n            small_file = SimpleUploadedFile(\"small_threshold.txt\", small_content)\n            saved_name = storage.save(\"small_threshold.txt\", small_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(small_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses memory handler: {len(small_content) < 1024}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: File size threshold testing - large file over memory limit\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # Create a temporary file larger than threshold\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            large_content = b\"x\" * 2048  # 2048 bytes > 1024\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            # Simulate temporary file upload\n            with open(temp_file.name, 'rb') as f:\n                temp_upload = TemporaryUploadedFile(\"large_threshold.txt\", \"text/plain\", len(large_content), \"utf-8\")\n                temp_upload.file = f\n                temp_upload.temporary_file_path = temp_file.name\n                saved_name = storage.save(\"large_threshold.txt\", temp_upload)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(large_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses temporary handler: {len(large_content) > 1024}\")\n            \n            # Cleanup\n            for path in [saved_path, temp_file.name]:\n                if os.path.exists(path):\n                    os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Multiple files with different sizes\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test multiple files of different sizes with consistent permissions\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            files_data = [\n                (\"tiny.txt\", b\"tiny\"),\n                (\"small.txt\", b\"small\" * 100),\n                (\"medium.txt\", b\"medium\" * 1000),\n            ]\n            \n            results = []\n            for filename, content in files_data:\n                uploaded_file = SimpleUploadedFile(filename, content)\n                saved_name = storage.save(filename, uploaded_file)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n                results.append((filename, len(content), permissions))\n                \n                if os.path.exists(saved_path):\n                    os.remove(saved_path)\n            \n            print(\"Output:\")\n            for filename, size, perms in results:\n                print(f\"{filename}: {size} bytes, permissions: {perms}\")\n            \n            all_same = len(set(perms for _, _, perms in results)) == 1\n            print(f\"All permissions consistent: {all_same}\")\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Custom storage location with permissions\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test custom storage location with FILE_UPLOAD_PERMISSIONS\")\n    \n    try:\n        custom_dir = tempfile.mkdtemp()\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage(location=custom_dir)\n            \n            content = b\"content for custom storage location\"\n            uploaded_file = SimpleUploadedFile(\"custom_storage.txt\", content)\n            saved_name = storage.save(\"custom_storage.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Custom storage directory: {custom_dir}\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Storage location works: {os.path.dirname(saved_path) == custom_dir}\")\n            \n            # Cleanup\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(custom_dir):\n                os.rmdir(custom_dir)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n        # Cleanup on error\n        if 'custom_dir' in locals() and os.path.exists(custom_dir):\n            try:\n                shutil.rmtree(custom_dir)\n            except:\n                pass\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Final cleanup\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default behavior without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nError: 'str' object is not callable\n\n### Test 2:\nInput:\nTest with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nFile permissions: 0o644\nExpected: 0o644\nCorrect: True\n\n### Test 3:\nInput:\nTest with restrictive FILE_UPLOAD_PERMISSIONS=0o600\nOutput:\nFile permissions: 0o600\nExpected: 0o600\nCorrect: True\n\n### Test 4:\nInput:\nTest with permissive FILE_UPLOAD_PERMISSIONS=0o666\nOutput:\nFile permissions: 0o666\nExpected: 0o666\nCorrect: True\n\n### Test 5:\nInput:\nTest small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nFile size: 512 bytes\nMemory threshold: 1024 bytes\nFile permissions: 0o644\nUses memory handler: True\n\n### Test 6:\nInput:\nTest large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nError: 'str' object is not callable\n\n### Test 7:\nInput:\nTest multiple files of different sizes with consistent permissions\nOutput:\ntiny.txt: 4 bytes, permissions: 0o644\nsmall.txt: 500 bytes, permissions: 0o644\nmedium.txt: 6000 bytes, permissions: 0o644\nAll permissions consistent: True\n\n### Test 8:\nInput:\nTest custom storage location with FILE_UPLOAD_PERMISSIONS\nOutput:\nCustom storage directory: /tmp/tmp33r2d8ha\nFile permissions: 0o644\nExpected: 0o644\nStorage location works: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary files\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely cleanup files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        # Test without FILE_UPLOAD_PERMISSIONS set (should use system default)\n        storage = FileSystemStorage()\n        \n        # Create large content to force TemporaryUploadedFile usage\n        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        class MockTemporaryUploadedFile:\n            def __init__(self, temp_path, name):\n                self.temporary_file_path = temp_path\n                self.name = name\n                self._file = open(temp_path, 'rb')\n            \n            def read(self, size=-1):\n                return self._file.read(size)\n            \n            def close(self):\n                self._file.close()\n        \n        mock_file = MockTemporaryUploadedFile(temp_file.name, \"test1.txt\")\n        saved_name = storage.save(\"test1.txt\", mock_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(f\"TemporaryUploadedFile permissions without setting: {final_permissions}\")\n        print(f\"FILE_UPLOAD_PERMISSIONS setting: {getattr(settings, 'FILE_UPLOAD_PERMISSIONS', 'Not set')}\")\n        \n        mock_file.close()\n        cleanup_file(saved_path)\n        cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            large_content = b\"y\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"test2.txt\")\n            saved_name = storage.save(\"test2.txt\", mock_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"TemporaryUploadedFile permissions with 0o644: {final_permissions}\")\n            print(f\"Expected: 0o644, Got: {final_permissions}, Match: {final_permissions == '0o644'}\")\n            \n            mock_file.close()\n            cleanup_file(saved_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"restrictive content\"\n            simple_file = SimpleUploadedFile(\"test3.txt\", content)\n            \n            saved_name = storage.save(\"test3.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Restrictive permissions (0o600): {final_permissions}\")\n            print(f\"Expected: 0o600, Got: {final_permissions}, Match: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            \n            content = b\"permissive content\"\n            simple_file = SimpleUploadedFile(\"test4.txt\", content)\n            \n            saved_name = storage.save(\"test4.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissive permissions (0o755): {final_permissions}\")\n            print(f\"Expected: 0o755, Got: {final_permissions}, Match: {final_permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Test SimpleUploadedFile\n            simple_content = b\"simple content\"\n            simple_file = SimpleUploadedFile(\"simple.txt\", simple_content)\n            simple_saved = storage.save(\"simple.txt\", simple_file)\n            simple_path = storage.path(simple_saved)\n            simple_permissions = oct(os.stat(simple_path).st_mode & 0o777)\n            \n            # Test TemporaryUploadedFile simulation\n            temp_content = b\"z\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(temp_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"temp.txt\")\n            temp_saved = storage.save(\"temp.txt\", mock_file)\n            temp_path = storage.path(temp_saved)\n            temp_permissions = oct(os.stat(temp_path).st_mode & 0o777)\n            \n            print(f\"SimpleUploadedFile permissions: {simple_permissions}\")\n            print(f\"TemporaryUploadedFile permissions: {temp_permissions}\")\n            print(f\"Permissions consistent: {simple_permissions == temp_permissions}\")\n            \n            mock_file.close()\n            cleanup_file(simple_path)\n            cleanup_file(temp_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=None):\n            storage = FileSystemStorage()\n            \n            content = b\"null permission content\"\n            simple_file = SimpleUploadedFile(\"test6.txt\", content)\n            \n            saved_name = storage.save(\"test6.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissions with None setting: {final_permissions}\")\n            print(f\"FILE_UPLOAD_PERMISSIONS: {settings.FILE_UPLOAD_PERMISSIONS}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test custom FileSystemStorage with file_permissions_mode override\")\n    print(\"Output:\")\n    \n    try:\n        # Test storage-level permission override\n        custom_storage = FileSystemStorage(file_permissions_mode=0o600)\n        \n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            content = b\"custom storage content\"\n            simple_file = SimpleUploadedFile(\"test7.txt\", content)\n            \n            saved_name = custom_storage.save(\"test7.txt\", simple_file)\n            saved_path = custom_storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Storage-level override permissions: {final_permissions}\")\n            print(f\"Global setting: 0o644, Storage override: 0o600\")\n            print(f\"Uses storage override: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test edge case with zero-byte file\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Zero-byte file\n            empty_content = b\"\"\n            empty_file = SimpleUploadedFile(\"empty.txt\", empty_content)\n            \n            saved_name = storage.save(\"empty.txt\", empty_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            file_size = final_stat.st_size\n            \n            print(f\"Zero-byte file permissions: {final_permissions}\")\n            print(f\"File size: {file_size} bytes\")\n            print(f\"Permissions set correctly: {final_permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions without setting: 0o644\nFILE_UPLOAD_PERMISSIONS setting: 420\n\n### Test 2:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions with 0o644: 0o644\nExpected: 0o644, Got: 0o644, Match: True\n\n### Test 3:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\nOutput:\nRestrictive permissions (0o600): 0o600\nExpected: 0o600, Got: 0o600, Match: True\n\n### Test 4:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\nOutput:\nPermissive permissions (0o755): 0o755\nExpected: 0o755, Got: 0o755, Match: True\n\n### Test 5:\nInput:\nTest consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\nOutput:\nSimpleUploadedFile permissions: 0o644\nTemporaryUploadedFile permissions: 0o644\nPermissions consistent: True\n\n### Test 6:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\nOutput:\nPermissions with None setting: 0o664\nFILE_UPLOAD_PERMISSIONS: None\n\n### Test 7:\nInput:\nTest custom FileSystemStorage with file_permissions_mode override\nOutput:\nStorage-level override permissions: 0o600\nGlobal setting: 0o644, Storage override: 0o600\nUses storage override: True\n\n### Test 8:\nInput:\nTest edge case with zero-byte file\nOutput:\nZero-byte file permissions: 0o644\nFile size: 0 bytes\nPermissions set correctly: True\n\n", "stderr": ""}]}
{"patch_content": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..9c74230572 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,9 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+# Setting this to a specific value ensures consistent permissions regardless of whether\n+# files are temporarily stored in memory or on disk during upload processing.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n", "repro_stdout": "### Test 1:\nInput:\nRegular file creation to show baseline permissions\nOutput:\nRegular file permissions: 0o664\n\n### Test 2:\nInput:\nNamedTemporaryFile creation to show restrictive permissions\nOutput:\nTemp file permissions: 0o600\n\n### Test 3:\nInput:\nSimulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nPermissions preserved from temp: False\n\n### Test 4:\nInput:\nSimulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nExpected permissions: 0o644\nCorrectly set to expected: True\n\n### Test 5:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\nOutput:\nSimpleUploadedFile final permissions: 0o644\nNo temp file involved - uses default file creation permissions\n\n", "repro_stderr": "", "differential_test": [{"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, InMemoryUploadedFile\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nfrom django.test.utils import override_settings\nfrom io import BytesIO\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5MB default\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely remove files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef get_file_permissions(filepath):\n    \"\"\"Helper to get file permissions\"\"\"\n    try:\n        stat_info = os.stat(filepath)\n        return oct(stat_info.st_mode & 0o777)\n    except:\n        return \"N/A\"\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Small file upload (in-memory) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Small file upload (512 bytes) - should use InMemoryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        small_content = b\"x\" * 512  # Small file, should stay in memory\n        small_file = SimpleUploadedFile(\"small_file.txt\", small_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"small_test.txt\", small_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Upload type: InMemoryUploadedFile (small)\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Large file upload (temporary file) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Large file upload (3MB) - should use TemporaryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        large_content = b\"x\" * (3 * 1024 * 1024)  # 3MB file, should go to temp file\n        large_file = SimpleUploadedFile(\"large_file.txt\", large_content, content_type=\"text/plain\")\n        \n        # Simulate what happens with TemporaryUploadedFile\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        temp_permissions = get_file_permissions(temp_file.name)\n        \n        # Now save it through storage\n        with open(temp_file.name, 'rb') as f:\n            saved_name = storage.save(\"large_test.txt\", f)\n            saved_path = storage.path(saved_name)\n        \n        final_permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Upload type: TemporaryUploadedFile (large)\")\n        \n        cleanup_file(temp_file.name)\n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: FILE_UPLOAD_PERMISSIONS set to 0o644\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            content = b\"test content with permissions\"\n            test_file = SimpleUploadedFile(\"perm_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"perm_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: FILE_UPLOAD_PERMISSIONS set to 0o600 (restrictive)\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            content = b\"restrictive permissions test\"\n            test_file = SimpleUploadedFile(\"restrictive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"restrictive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o600\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: FILE_UPLOAD_PERMISSIONS set to 0o755 (permissive)\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            content = b\"permissive permissions test\"\n            test_file = SimpleUploadedFile(\"permissive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"permissive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o755\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: Empty file upload\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Empty file upload - edge case\")\n    \n    try:\n        storage = FileSystemStorage()\n        empty_content = b\"\"\n        empty_file = SimpleUploadedFile(\"empty_file.txt\", empty_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"empty_test.txt\", empty_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Empty file handled successfully: {file_size == 0}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Binary file upload\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Binary file upload (simulated image data)\")\n    \n    try:\n        storage = FileSystemStorage()\n        # Simulate binary image data\n        binary_content = bytes([i % 256 for i in range(1024)])  # 1KB of binary data\n        binary_file = SimpleUploadedFile(\"test_image.jpg\", binary_content, content_type=\"image/jpeg\")\n        \n        saved_name = storage.save(\"binary_test.jpg\", binary_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Content type: image/jpeg\")\n        print(f\"Binary file handled successfully: {file_size == 1024}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Consistency test between small and large files\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Consistency test: comparing permissions between small and large files\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Small file\n            small_content = b\"small\" * 100  # 500 bytes\n            small_file = SimpleUploadedFile(\"small_consistency.txt\", small_content, content_type=\"text/plain\")\n            small_saved = storage.save(\"small_consistency.txt\", small_file)\n            small_path = storage.path(small_saved)\n            small_permissions = get_file_permissions(small_path)\n            \n            # Large file (simulated temporary file behavior)\n            large_content = b\"large\" * 100000  # ~500KB\n            large_file = SimpleUploadedFile(\"large_consistency.txt\", large_content, content_type=\"text/plain\")\n            large_saved = storage.save(\"large_consistency.txt\", large_file)\n            large_path = storage.path(large_saved)\n            large_permissions = get_file_permissions(large_path)\n            \n            print(\"Output:\")\n            print(f\"Small file permissions: {small_permissions}\")\n            print(f\"Large file permissions: {large_permissions}\")\n            print(f\"Permissions are consistent: {small_permissions == large_permissions}\")\n            print(f\"Both match expected 0o644: {small_permissions == '0o644' and large_permissions == '0o644'}\")\n            \n            cleanup_file(small_path)\n            cleanup_file(large_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nSmall file upload (512 bytes) - should use InMemoryUploadedFile\nOutput:\nFile size: 512 bytes\nFile permissions: 0o644\nUpload type: InMemoryUploadedFile (small)\n\n### Test 2:\nInput:\nLarge file upload (3MB) - should use TemporaryUploadedFile\nOutput:\nFile size: 3145728 bytes\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nUpload type: TemporaryUploadedFile (large)\n\n### Test 3:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nExpected permissions: 0o644\nActual permissions: 0o644\nPermissions match expected: True\n\n### Test 4:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\nOutput:\nExpected permissions: 0o600\nActual permissions: 0o600\nPermissions match expected: True\n\n### Test 5:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\nOutput:\nExpected permissions: 0o755\nActual permissions: 0o755\nPermissions match expected: True\n\n### Test 6:\nInput:\nEmpty file upload - edge case\nOutput:\nFile size: 0 bytes\nFile permissions: 0o644\nEmpty file handled successfully: True\n\n### Test 7:\nInput:\nBinary file upload (simulated image data)\nOutput:\nFile size: 1024 bytes\nFile permissions: 0o644\nContent type: image/jpeg\nBinary file handled successfully: True\n\n### Test 8:\nInput:\nConsistency test: comparing permissions between small and large files\nOutput:\nSmall file permissions: 0o644\nLarge file permissions: 0o644\nPermissions are consistent: True\nBoth match expected 0o644: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nimport django\nfrom io import BytesIO\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5 MB default\n    )\n\ndjango.setup()\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Default behavior - no FILE_UPLOAD_PERMISSIONS setting\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default behavior without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Small file (uses SimpleUploadedFile/MemoryFileUploadHandler)\n        small_content = b\"small file content\"\n        small_file = SimpleUploadedFile(\"small.txt\", small_content)\n        small_saved = storage.save(\"small.txt\", small_file)\n        small_path = storage.path(small_saved)\n        small_perms = oct(os.stat(small_path).st_mode & 0o777)\n        \n        # Large file simulation (uses TemporaryUploadedFile)\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        large_content = b\"large file content\" * 1000\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        with open(temp_file.name, 'rb') as f:\n            temp_upload = TemporaryUploadedFile(\"large.txt\", \"text/plain\", len(large_content), \"utf-8\")\n            temp_upload.file = f\n            temp_upload.temporary_file_path = temp_file.name\n            large_saved = storage.save(\"large.txt\", temp_upload)\n            large_path = storage.path(large_saved)\n            large_perms = oct(os.stat(large_path).st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Small file permissions: {small_perms}\")\n        print(f\"Large file permissions: {large_perms}\")\n        print(f\"Permissions consistent: {small_perms == large_perms}\")\n        \n        # Cleanup\n        for path in [small_path, large_path, temp_file.name]:\n            if os.path.exists(path):\n                os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Explicit FILE_UPLOAD_PERMISSIONS=0o644\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 644 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test644.txt\", content)\n            saved_name = storage.save(\"test644.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Correct: {permissions == '0o644'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: Restrictive permissions FILE_UPLOAD_PERMISSIONS=0o600\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test with restrictive FILE_UPLOAD_PERMISSIONS=0o600\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 600 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test600.txt\", content)\n            saved_name = storage.save(\"test600.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o600\")\n            print(f\"Correct: {permissions == '0o600'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Permissive permissions FILE_UPLOAD_PERMISSIONS=0o666\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test with permissive FILE_UPLOAD_PERMISSIONS=0o666\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o666):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 666 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test666.txt\", content)\n            saved_name = storage.save(\"test666.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o666\")\n            print(f\"Correct: {permissions == '0o666'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: File size threshold testing - small file under memory limit\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # File smaller than threshold (should use memory handler)\n            small_content = b\"x\" * 512  # 512 bytes < 1024\n            small_file = SimpleUploadedFile(\"small_threshold.txt\", small_content)\n            saved_name = storage.save(\"small_threshold.txt\", small_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(small_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses memory handler: {len(small_content) < 1024}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: File size threshold testing - large file over memory limit\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # Create a temporary file larger than threshold\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            large_content = b\"x\" * 2048  # 2048 bytes > 1024\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            # Simulate temporary file upload\n            with open(temp_file.name, 'rb') as f:\n                temp_upload = TemporaryUploadedFile(\"large_threshold.txt\", \"text/plain\", len(large_content), \"utf-8\")\n                temp_upload.file = f\n                temp_upload.temporary_file_path = temp_file.name\n                saved_name = storage.save(\"large_threshold.txt\", temp_upload)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(large_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses temporary handler: {len(large_content) > 1024}\")\n            \n            # Cleanup\n            for path in [saved_path, temp_file.name]:\n                if os.path.exists(path):\n                    os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Multiple files with different sizes\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test multiple files of different sizes with consistent permissions\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            files_data = [\n                (\"tiny.txt\", b\"tiny\"),\n                (\"small.txt\", b\"small\" * 100),\n                (\"medium.txt\", b\"medium\" * 1000),\n            ]\n            \n            results = []\n            for filename, content in files_data:\n                uploaded_file = SimpleUploadedFile(filename, content)\n                saved_name = storage.save(filename, uploaded_file)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n                results.append((filename, len(content), permissions))\n                \n                if os.path.exists(saved_path):\n                    os.remove(saved_path)\n            \n            print(\"Output:\")\n            for filename, size, perms in results:\n                print(f\"{filename}: {size} bytes, permissions: {perms}\")\n            \n            all_same = len(set(perms for _, _, perms in results)) == 1\n            print(f\"All permissions consistent: {all_same}\")\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Custom storage location with permissions\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test custom storage location with FILE_UPLOAD_PERMISSIONS\")\n    \n    try:\n        custom_dir = tempfile.mkdtemp()\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage(location=custom_dir)\n            \n            content = b\"content for custom storage location\"\n            uploaded_file = SimpleUploadedFile(\"custom_storage.txt\", content)\n            saved_name = storage.save(\"custom_storage.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Custom storage directory: {custom_dir}\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Storage location works: {os.path.dirname(saved_path) == custom_dir}\")\n            \n            # Cleanup\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(custom_dir):\n                os.rmdir(custom_dir)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n        # Cleanup on error\n        if 'custom_dir' in locals() and os.path.exists(custom_dir):\n            try:\n                shutil.rmtree(custom_dir)\n            except:\n                pass\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Final cleanup\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default behavior without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nError: 'str' object is not callable\n\n### Test 2:\nInput:\nTest with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nFile permissions: 0o644\nExpected: 0o644\nCorrect: True\n\n### Test 3:\nInput:\nTest with restrictive FILE_UPLOAD_PERMISSIONS=0o600\nOutput:\nFile permissions: 0o600\nExpected: 0o600\nCorrect: True\n\n### Test 4:\nInput:\nTest with permissive FILE_UPLOAD_PERMISSIONS=0o666\nOutput:\nFile permissions: 0o666\nExpected: 0o666\nCorrect: True\n\n### Test 5:\nInput:\nTest small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nFile size: 512 bytes\nMemory threshold: 1024 bytes\nFile permissions: 0o644\nUses memory handler: True\n\n### Test 6:\nInput:\nTest large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nError: 'str' object is not callable\n\n### Test 7:\nInput:\nTest multiple files of different sizes with consistent permissions\nOutput:\ntiny.txt: 4 bytes, permissions: 0o644\nsmall.txt: 500 bytes, permissions: 0o644\nmedium.txt: 6000 bytes, permissions: 0o644\nAll permissions consistent: True\n\n### Test 8:\nInput:\nTest custom storage location with FILE_UPLOAD_PERMISSIONS\nOutput:\nCustom storage directory: /tmp/tmp3cl5_9ut\nFile permissions: 0o644\nExpected: 0o644\nStorage location works: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary files\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely cleanup files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        # Test without FILE_UPLOAD_PERMISSIONS set (should use system default)\n        storage = FileSystemStorage()\n        \n        # Create large content to force TemporaryUploadedFile usage\n        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        class MockTemporaryUploadedFile:\n            def __init__(self, temp_path, name):\n                self.temporary_file_path = temp_path\n                self.name = name\n                self._file = open(temp_path, 'rb')\n            \n            def read(self, size=-1):\n                return self._file.read(size)\n            \n            def close(self):\n                self._file.close()\n        \n        mock_file = MockTemporaryUploadedFile(temp_file.name, \"test1.txt\")\n        saved_name = storage.save(\"test1.txt\", mock_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(f\"TemporaryUploadedFile permissions without setting: {final_permissions}\")\n        print(f\"FILE_UPLOAD_PERMISSIONS setting: {getattr(settings, 'FILE_UPLOAD_PERMISSIONS', 'Not set')}\")\n        \n        mock_file.close()\n        cleanup_file(saved_path)\n        cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            large_content = b\"y\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"test2.txt\")\n            saved_name = storage.save(\"test2.txt\", mock_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"TemporaryUploadedFile permissions with 0o644: {final_permissions}\")\n            print(f\"Expected: 0o644, Got: {final_permissions}, Match: {final_permissions == '0o644'}\")\n            \n            mock_file.close()\n            cleanup_file(saved_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"restrictive content\"\n            simple_file = SimpleUploadedFile(\"test3.txt\", content)\n            \n            saved_name = storage.save(\"test3.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Restrictive permissions (0o600): {final_permissions}\")\n            print(f\"Expected: 0o600, Got: {final_permissions}, Match: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            \n            content = b\"permissive content\"\n            simple_file = SimpleUploadedFile(\"test4.txt\", content)\n            \n            saved_name = storage.save(\"test4.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissive permissions (0o755): {final_permissions}\")\n            print(f\"Expected: 0o755, Got: {final_permissions}, Match: {final_permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Test SimpleUploadedFile\n            simple_content = b\"simple content\"\n            simple_file = SimpleUploadedFile(\"simple.txt\", simple_content)\n            simple_saved = storage.save(\"simple.txt\", simple_file)\n            simple_path = storage.path(simple_saved)\n            simple_permissions = oct(os.stat(simple_path).st_mode & 0o777)\n            \n            # Test TemporaryUploadedFile simulation\n            temp_content = b\"z\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(temp_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"temp.txt\")\n            temp_saved = storage.save(\"temp.txt\", mock_file)\n            temp_path = storage.path(temp_saved)\n            temp_permissions = oct(os.stat(temp_path).st_mode & 0o777)\n            \n            print(f\"SimpleUploadedFile permissions: {simple_permissions}\")\n            print(f\"TemporaryUploadedFile permissions: {temp_permissions}\")\n            print(f\"Permissions consistent: {simple_permissions == temp_permissions}\")\n            \n            mock_file.close()\n            cleanup_file(simple_path)\n            cleanup_file(temp_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=None):\n            storage = FileSystemStorage()\n            \n            content = b\"null permission content\"\n            simple_file = SimpleUploadedFile(\"test6.txt\", content)\n            \n            saved_name = storage.save(\"test6.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissions with None setting: {final_permissions}\")\n            print(f\"FILE_UPLOAD_PERMISSIONS: {settings.FILE_UPLOAD_PERMISSIONS}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test custom FileSystemStorage with file_permissions_mode override\")\n    print(\"Output:\")\n    \n    try:\n        # Test storage-level permission override\n        custom_storage = FileSystemStorage(file_permissions_mode=0o600)\n        \n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            content = b\"custom storage content\"\n            simple_file = SimpleUploadedFile(\"test7.txt\", content)\n            \n            saved_name = custom_storage.save(\"test7.txt\", simple_file)\n            saved_path = custom_storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Storage-level override permissions: {final_permissions}\")\n            print(f\"Global setting: 0o644, Storage override: 0o600\")\n            print(f\"Uses storage override: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test edge case with zero-byte file\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Zero-byte file\n            empty_content = b\"\"\n            empty_file = SimpleUploadedFile(\"empty.txt\", empty_content)\n            \n            saved_name = storage.save(\"empty.txt\", empty_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            file_size = final_stat.st_size\n            \n            print(f\"Zero-byte file permissions: {final_permissions}\")\n            print(f\"File size: {file_size} bytes\")\n            print(f\"Permissions set correctly: {final_permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions without setting: 0o644\nFILE_UPLOAD_PERMISSIONS setting: 420\n\n### Test 2:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions with 0o644: 0o644\nExpected: 0o644, Got: 0o644, Match: True\n\n### Test 3:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\nOutput:\nRestrictive permissions (0o600): 0o600\nExpected: 0o600, Got: 0o600, Match: True\n\n### Test 4:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\nOutput:\nPermissive permissions (0o755): 0o755\nExpected: 0o755, Got: 0o755, Match: True\n\n### Test 5:\nInput:\nTest consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\nOutput:\nSimpleUploadedFile permissions: 0o644\nTemporaryUploadedFile permissions: 0o644\nPermissions consistent: True\n\n### Test 6:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\nOutput:\nPermissions with None setting: 0o664\nFILE_UPLOAD_PERMISSIONS: None\n\n### Test 7:\nInput:\nTest custom FileSystemStorage with file_permissions_mode override\nOutput:\nStorage-level override permissions: 0o600\nGlobal setting: 0o644, Storage override: 0o600\nUses storage override: True\n\n### Test 8:\nInput:\nTest edge case with zero-byte file\nOutput:\nZero-byte file permissions: 0o644\nFile size: 0 bytes\nPermissions set correctly: True\n\n", "stderr": ""}]}
{"patch_content": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..7cd43d5796 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,12 +304,16 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+# Setting this to a specific value (rather than None) ensures consistent permissions\n+# regardless of whether files are stored temporarily in memory or on disk during upload.\n+# 0o644 allows owner read/write, group/others read-only access.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n # see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\n+# 0o755 allows owner read/write/execute, group/others read/execute access.\n+FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755\n \n # Python module path where user will place custom format definition.\n # The directory where this setting is pointing should contain subdirectories\n", "repro_stdout": "### Test 1:\nInput:\nRegular file creation to show baseline permissions\nOutput:\nRegular file permissions: 0o664\n\n### Test 2:\nInput:\nNamedTemporaryFile creation to show restrictive permissions\nOutput:\nTemp file permissions: 0o600\n\n### Test 3:\nInput:\nSimulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nPermissions preserved from temp: False\n\n### Test 4:\nInput:\nSimulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nExpected permissions: 0o644\nCorrectly set to expected: True\n\n### Test 5:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\nOutput:\nSimpleUploadedFile final permissions: 0o644\nNo temp file involved - uses default file creation permissions\n\n", "repro_stderr": "", "differential_test": [{"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, InMemoryUploadedFile\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nfrom django.test.utils import override_settings\nfrom io import BytesIO\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5MB default\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely remove files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef get_file_permissions(filepath):\n    \"\"\"Helper to get file permissions\"\"\"\n    try:\n        stat_info = os.stat(filepath)\n        return oct(stat_info.st_mode & 0o777)\n    except:\n        return \"N/A\"\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Small file upload (in-memory) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Small file upload (512 bytes) - should use InMemoryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        small_content = b\"x\" * 512  # Small file, should stay in memory\n        small_file = SimpleUploadedFile(\"small_file.txt\", small_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"small_test.txt\", small_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Upload type: InMemoryUploadedFile (small)\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Large file upload (temporary file) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Large file upload (3MB) - should use TemporaryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        large_content = b\"x\" * (3 * 1024 * 1024)  # 3MB file, should go to temp file\n        large_file = SimpleUploadedFile(\"large_file.txt\", large_content, content_type=\"text/plain\")\n        \n        # Simulate what happens with TemporaryUploadedFile\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        temp_permissions = get_file_permissions(temp_file.name)\n        \n        # Now save it through storage\n        with open(temp_file.name, 'rb') as f:\n            saved_name = storage.save(\"large_test.txt\", f)\n            saved_path = storage.path(saved_name)\n        \n        final_permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Upload type: TemporaryUploadedFile (large)\")\n        \n        cleanup_file(temp_file.name)\n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: FILE_UPLOAD_PERMISSIONS set to 0o644\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            content = b\"test content with permissions\"\n            test_file = SimpleUploadedFile(\"perm_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"perm_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: FILE_UPLOAD_PERMISSIONS set to 0o600 (restrictive)\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            content = b\"restrictive permissions test\"\n            test_file = SimpleUploadedFile(\"restrictive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"restrictive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o600\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: FILE_UPLOAD_PERMISSIONS set to 0o755 (permissive)\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            content = b\"permissive permissions test\"\n            test_file = SimpleUploadedFile(\"permissive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"permissive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o755\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: Empty file upload\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Empty file upload - edge case\")\n    \n    try:\n        storage = FileSystemStorage()\n        empty_content = b\"\"\n        empty_file = SimpleUploadedFile(\"empty_file.txt\", empty_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"empty_test.txt\", empty_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Empty file handled successfully: {file_size == 0}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Binary file upload\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Binary file upload (simulated image data)\")\n    \n    try:\n        storage = FileSystemStorage()\n        # Simulate binary image data\n        binary_content = bytes([i % 256 for i in range(1024)])  # 1KB of binary data\n        binary_file = SimpleUploadedFile(\"test_image.jpg\", binary_content, content_type=\"image/jpeg\")\n        \n        saved_name = storage.save(\"binary_test.jpg\", binary_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Content type: image/jpeg\")\n        print(f\"Binary file handled successfully: {file_size == 1024}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Consistency test between small and large files\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Consistency test: comparing permissions between small and large files\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Small file\n            small_content = b\"small\" * 100  # 500 bytes\n            small_file = SimpleUploadedFile(\"small_consistency.txt\", small_content, content_type=\"text/plain\")\n            small_saved = storage.save(\"small_consistency.txt\", small_file)\n            small_path = storage.path(small_saved)\n            small_permissions = get_file_permissions(small_path)\n            \n            # Large file (simulated temporary file behavior)\n            large_content = b\"large\" * 100000  # ~500KB\n            large_file = SimpleUploadedFile(\"large_consistency.txt\", large_content, content_type=\"text/plain\")\n            large_saved = storage.save(\"large_consistency.txt\", large_file)\n            large_path = storage.path(large_saved)\n            large_permissions = get_file_permissions(large_path)\n            \n            print(\"Output:\")\n            print(f\"Small file permissions: {small_permissions}\")\n            print(f\"Large file permissions: {large_permissions}\")\n            print(f\"Permissions are consistent: {small_permissions == large_permissions}\")\n            print(f\"Both match expected 0o644: {small_permissions == '0o644' and large_permissions == '0o644'}\")\n            \n            cleanup_file(small_path)\n            cleanup_file(large_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nSmall file upload (512 bytes) - should use InMemoryUploadedFile\nOutput:\nFile size: 512 bytes\nFile permissions: 0o644\nUpload type: InMemoryUploadedFile (small)\n\n### Test 2:\nInput:\nLarge file upload (3MB) - should use TemporaryUploadedFile\nOutput:\nFile size: 3145728 bytes\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nUpload type: TemporaryUploadedFile (large)\n\n### Test 3:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nExpected permissions: 0o644\nActual permissions: 0o644\nPermissions match expected: True\n\n### Test 4:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\nOutput:\nExpected permissions: 0o600\nActual permissions: 0o600\nPermissions match expected: True\n\n### Test 5:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\nOutput:\nExpected permissions: 0o755\nActual permissions: 0o755\nPermissions match expected: True\n\n### Test 6:\nInput:\nEmpty file upload - edge case\nOutput:\nFile size: 0 bytes\nFile permissions: 0o644\nEmpty file handled successfully: True\n\n### Test 7:\nInput:\nBinary file upload (simulated image data)\nOutput:\nFile size: 1024 bytes\nFile permissions: 0o644\nContent type: image/jpeg\nBinary file handled successfully: True\n\n### Test 8:\nInput:\nConsistency test: comparing permissions between small and large files\nOutput:\nSmall file permissions: 0o644\nLarge file permissions: 0o644\nPermissions are consistent: True\nBoth match expected 0o644: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nimport django\nfrom io import BytesIO\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5 MB default\n    )\n\ndjango.setup()\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Default behavior - no FILE_UPLOAD_PERMISSIONS setting\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default behavior without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Small file (uses SimpleUploadedFile/MemoryFileUploadHandler)\n        small_content = b\"small file content\"\n        small_file = SimpleUploadedFile(\"small.txt\", small_content)\n        small_saved = storage.save(\"small.txt\", small_file)\n        small_path = storage.path(small_saved)\n        small_perms = oct(os.stat(small_path).st_mode & 0o777)\n        \n        # Large file simulation (uses TemporaryUploadedFile)\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        large_content = b\"large file content\" * 1000\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        with open(temp_file.name, 'rb') as f:\n            temp_upload = TemporaryUploadedFile(\"large.txt\", \"text/plain\", len(large_content), \"utf-8\")\n            temp_upload.file = f\n            temp_upload.temporary_file_path = temp_file.name\n            large_saved = storage.save(\"large.txt\", temp_upload)\n            large_path = storage.path(large_saved)\n            large_perms = oct(os.stat(large_path).st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Small file permissions: {small_perms}\")\n        print(f\"Large file permissions: {large_perms}\")\n        print(f\"Permissions consistent: {small_perms == large_perms}\")\n        \n        # Cleanup\n        for path in [small_path, large_path, temp_file.name]:\n            if os.path.exists(path):\n                os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Explicit FILE_UPLOAD_PERMISSIONS=0o644\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 644 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test644.txt\", content)\n            saved_name = storage.save(\"test644.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Correct: {permissions == '0o644'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: Restrictive permissions FILE_UPLOAD_PERMISSIONS=0o600\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test with restrictive FILE_UPLOAD_PERMISSIONS=0o600\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 600 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test600.txt\", content)\n            saved_name = storage.save(\"test600.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o600\")\n            print(f\"Correct: {permissions == '0o600'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Permissive permissions FILE_UPLOAD_PERMISSIONS=0o666\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test with permissive FILE_UPLOAD_PERMISSIONS=0o666\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o666):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 666 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test666.txt\", content)\n            saved_name = storage.save(\"test666.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o666\")\n            print(f\"Correct: {permissions == '0o666'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: File size threshold testing - small file under memory limit\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # File smaller than threshold (should use memory handler)\n            small_content = b\"x\" * 512  # 512 bytes < 1024\n            small_file = SimpleUploadedFile(\"small_threshold.txt\", small_content)\n            saved_name = storage.save(\"small_threshold.txt\", small_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(small_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses memory handler: {len(small_content) < 1024}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: File size threshold testing - large file over memory limit\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # Create a temporary file larger than threshold\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            large_content = b\"x\" * 2048  # 2048 bytes > 1024\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            # Simulate temporary file upload\n            with open(temp_file.name, 'rb') as f:\n                temp_upload = TemporaryUploadedFile(\"large_threshold.txt\", \"text/plain\", len(large_content), \"utf-8\")\n                temp_upload.file = f\n                temp_upload.temporary_file_path = temp_file.name\n                saved_name = storage.save(\"large_threshold.txt\", temp_upload)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(large_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses temporary handler: {len(large_content) > 1024}\")\n            \n            # Cleanup\n            for path in [saved_path, temp_file.name]:\n                if os.path.exists(path):\n                    os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Multiple files with different sizes\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test multiple files of different sizes with consistent permissions\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            files_data = [\n                (\"tiny.txt\", b\"tiny\"),\n                (\"small.txt\", b\"small\" * 100),\n                (\"medium.txt\", b\"medium\" * 1000),\n            ]\n            \n            results = []\n            for filename, content in files_data:\n                uploaded_file = SimpleUploadedFile(filename, content)\n                saved_name = storage.save(filename, uploaded_file)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n                results.append((filename, len(content), permissions))\n                \n                if os.path.exists(saved_path):\n                    os.remove(saved_path)\n            \n            print(\"Output:\")\n            for filename, size, perms in results:\n                print(f\"{filename}: {size} bytes, permissions: {perms}\")\n            \n            all_same = len(set(perms for _, _, perms in results)) == 1\n            print(f\"All permissions consistent: {all_same}\")\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Custom storage location with permissions\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test custom storage location with FILE_UPLOAD_PERMISSIONS\")\n    \n    try:\n        custom_dir = tempfile.mkdtemp()\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage(location=custom_dir)\n            \n            content = b\"content for custom storage location\"\n            uploaded_file = SimpleUploadedFile(\"custom_storage.txt\", content)\n            saved_name = storage.save(\"custom_storage.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Custom storage directory: {custom_dir}\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Storage location works: {os.path.dirname(saved_path) == custom_dir}\")\n            \n            # Cleanup\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(custom_dir):\n                os.rmdir(custom_dir)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n        # Cleanup on error\n        if 'custom_dir' in locals() and os.path.exists(custom_dir):\n            try:\n                shutil.rmtree(custom_dir)\n            except:\n                pass\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Final cleanup\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default behavior without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nError: 'str' object is not callable\n\n### Test 2:\nInput:\nTest with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nFile permissions: 0o644\nExpected: 0o644\nCorrect: True\n\n### Test 3:\nInput:\nTest with restrictive FILE_UPLOAD_PERMISSIONS=0o600\nOutput:\nFile permissions: 0o600\nExpected: 0o600\nCorrect: True\n\n### Test 4:\nInput:\nTest with permissive FILE_UPLOAD_PERMISSIONS=0o666\nOutput:\nFile permissions: 0o666\nExpected: 0o666\nCorrect: True\n\n### Test 5:\nInput:\nTest small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nFile size: 512 bytes\nMemory threshold: 1024 bytes\nFile permissions: 0o644\nUses memory handler: True\n\n### Test 6:\nInput:\nTest large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nError: 'str' object is not callable\n\n### Test 7:\nInput:\nTest multiple files of different sizes with consistent permissions\nOutput:\ntiny.txt: 4 bytes, permissions: 0o644\nsmall.txt: 500 bytes, permissions: 0o644\nmedium.txt: 6000 bytes, permissions: 0o644\nAll permissions consistent: True\n\n### Test 8:\nInput:\nTest custom storage location with FILE_UPLOAD_PERMISSIONS\nOutput:\nCustom storage directory: /tmp/tmpf2jtqwib\nFile permissions: 0o644\nExpected: 0o644\nStorage location works: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary files\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely cleanup files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        # Test without FILE_UPLOAD_PERMISSIONS set (should use system default)\n        storage = FileSystemStorage()\n        \n        # Create large content to force TemporaryUploadedFile usage\n        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        class MockTemporaryUploadedFile:\n            def __init__(self, temp_path, name):\n                self.temporary_file_path = temp_path\n                self.name = name\n                self._file = open(temp_path, 'rb')\n            \n            def read(self, size=-1):\n                return self._file.read(size)\n            \n            def close(self):\n                self._file.close()\n        \n        mock_file = MockTemporaryUploadedFile(temp_file.name, \"test1.txt\")\n        saved_name = storage.save(\"test1.txt\", mock_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(f\"TemporaryUploadedFile permissions without setting: {final_permissions}\")\n        print(f\"FILE_UPLOAD_PERMISSIONS setting: {getattr(settings, 'FILE_UPLOAD_PERMISSIONS', 'Not set')}\")\n        \n        mock_file.close()\n        cleanup_file(saved_path)\n        cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            large_content = b\"y\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"test2.txt\")\n            saved_name = storage.save(\"test2.txt\", mock_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"TemporaryUploadedFile permissions with 0o644: {final_permissions}\")\n            print(f\"Expected: 0o644, Got: {final_permissions}, Match: {final_permissions == '0o644'}\")\n            \n            mock_file.close()\n            cleanup_file(saved_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"restrictive content\"\n            simple_file = SimpleUploadedFile(\"test3.txt\", content)\n            \n            saved_name = storage.save(\"test3.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Restrictive permissions (0o600): {final_permissions}\")\n            print(f\"Expected: 0o600, Got: {final_permissions}, Match: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            \n            content = b\"permissive content\"\n            simple_file = SimpleUploadedFile(\"test4.txt\", content)\n            \n            saved_name = storage.save(\"test4.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissive permissions (0o755): {final_permissions}\")\n            print(f\"Expected: 0o755, Got: {final_permissions}, Match: {final_permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Test SimpleUploadedFile\n            simple_content = b\"simple content\"\n            simple_file = SimpleUploadedFile(\"simple.txt\", simple_content)\n            simple_saved = storage.save(\"simple.txt\", simple_file)\n            simple_path = storage.path(simple_saved)\n            simple_permissions = oct(os.stat(simple_path).st_mode & 0o777)\n            \n            # Test TemporaryUploadedFile simulation\n            temp_content = b\"z\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(temp_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"temp.txt\")\n            temp_saved = storage.save(\"temp.txt\", mock_file)\n            temp_path = storage.path(temp_saved)\n            temp_permissions = oct(os.stat(temp_path).st_mode & 0o777)\n            \n            print(f\"SimpleUploadedFile permissions: {simple_permissions}\")\n            print(f\"TemporaryUploadedFile permissions: {temp_permissions}\")\n            print(f\"Permissions consistent: {simple_permissions == temp_permissions}\")\n            \n            mock_file.close()\n            cleanup_file(simple_path)\n            cleanup_file(temp_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=None):\n            storage = FileSystemStorage()\n            \n            content = b\"null permission content\"\n            simple_file = SimpleUploadedFile(\"test6.txt\", content)\n            \n            saved_name = storage.save(\"test6.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissions with None setting: {final_permissions}\")\n            print(f\"FILE_UPLOAD_PERMISSIONS: {settings.FILE_UPLOAD_PERMISSIONS}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test custom FileSystemStorage with file_permissions_mode override\")\n    print(\"Output:\")\n    \n    try:\n        # Test storage-level permission override\n        custom_storage = FileSystemStorage(file_permissions_mode=0o600)\n        \n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            content = b\"custom storage content\"\n            simple_file = SimpleUploadedFile(\"test7.txt\", content)\n            \n            saved_name = custom_storage.save(\"test7.txt\", simple_file)\n            saved_path = custom_storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Storage-level override permissions: {final_permissions}\")\n            print(f\"Global setting: 0o644, Storage override: 0o600\")\n            print(f\"Uses storage override: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test edge case with zero-byte file\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Zero-byte file\n            empty_content = b\"\"\n            empty_file = SimpleUploadedFile(\"empty.txt\", empty_content)\n            \n            saved_name = storage.save(\"empty.txt\", empty_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            file_size = final_stat.st_size\n            \n            print(f\"Zero-byte file permissions: {final_permissions}\")\n            print(f\"File size: {file_size} bytes\")\n            print(f\"Permissions set correctly: {final_permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions without setting: 0o644\nFILE_UPLOAD_PERMISSIONS setting: 420\n\n### Test 2:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions with 0o644: 0o644\nExpected: 0o644, Got: 0o644, Match: True\n\n### Test 3:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\nOutput:\nRestrictive permissions (0o600): 0o600\nExpected: 0o600, Got: 0o600, Match: True\n\n### Test 4:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\nOutput:\nPermissive permissions (0o755): 0o755\nExpected: 0o755, Got: 0o755, Match: True\n\n### Test 5:\nInput:\nTest consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\nOutput:\nSimpleUploadedFile permissions: 0o644\nTemporaryUploadedFile permissions: 0o644\nPermissions consistent: True\n\n### Test 6:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\nOutput:\nPermissions with None setting: 0o664\nFILE_UPLOAD_PERMISSIONS: None\n\n### Test 7:\nInput:\nTest custom FileSystemStorage with file_permissions_mode override\nOutput:\nStorage-level override permissions: 0o600\nGlobal setting: 0o644, Storage override: 0o600\nUses storage override: True\n\n### Test 8:\nInput:\nTest edge case with zero-byte file\nOutput:\nZero-byte file permissions: 0o644\nFile size: 0 bytes\nPermissions set correctly: True\n\n", "stderr": ""}]}
{"patch_content": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..af2b6643af 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,12 +304,12 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n # see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\n+FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755\n \n # Python module path where user will place custom format definition.\n # The directory where this setting is pointing should contain subdirectories\n", "repro_stdout": "### Test 1:\nInput:\nRegular file creation to show baseline permissions\nOutput:\nRegular file permissions: 0o664\n\n### Test 2:\nInput:\nNamedTemporaryFile creation to show restrictive permissions\nOutput:\nTemp file permissions: 0o600\n\n### Test 3:\nInput:\nSimulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nPermissions preserved from temp: False\n\n### Test 4:\nInput:\nSimulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nExpected permissions: 0o644\nCorrectly set to expected: True\n\n### Test 5:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\nOutput:\nSimpleUploadedFile final permissions: 0o644\nNo temp file involved - uses default file creation permissions\n\n", "repro_stderr": "", "differential_test": [{"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, InMemoryUploadedFile\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nfrom django.test.utils import override_settings\nfrom io import BytesIO\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5MB default\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely remove files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef get_file_permissions(filepath):\n    \"\"\"Helper to get file permissions\"\"\"\n    try:\n        stat_info = os.stat(filepath)\n        return oct(stat_info.st_mode & 0o777)\n    except:\n        return \"N/A\"\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Small file upload (in-memory) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Small file upload (512 bytes) - should use InMemoryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        small_content = b\"x\" * 512  # Small file, should stay in memory\n        small_file = SimpleUploadedFile(\"small_file.txt\", small_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"small_test.txt\", small_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Upload type: InMemoryUploadedFile (small)\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Large file upload (temporary file) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Large file upload (3MB) - should use TemporaryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        large_content = b\"x\" * (3 * 1024 * 1024)  # 3MB file, should go to temp file\n        large_file = SimpleUploadedFile(\"large_file.txt\", large_content, content_type=\"text/plain\")\n        \n        # Simulate what happens with TemporaryUploadedFile\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        temp_permissions = get_file_permissions(temp_file.name)\n        \n        # Now save it through storage\n        with open(temp_file.name, 'rb') as f:\n            saved_name = storage.save(\"large_test.txt\", f)\n            saved_path = storage.path(saved_name)\n        \n        final_permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Upload type: TemporaryUploadedFile (large)\")\n        \n        cleanup_file(temp_file.name)\n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: FILE_UPLOAD_PERMISSIONS set to 0o644\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            content = b\"test content with permissions\"\n            test_file = SimpleUploadedFile(\"perm_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"perm_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: FILE_UPLOAD_PERMISSIONS set to 0o600 (restrictive)\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            content = b\"restrictive permissions test\"\n            test_file = SimpleUploadedFile(\"restrictive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"restrictive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o600\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: FILE_UPLOAD_PERMISSIONS set to 0o755 (permissive)\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            content = b\"permissive permissions test\"\n            test_file = SimpleUploadedFile(\"permissive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"permissive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o755\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: Empty file upload\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Empty file upload - edge case\")\n    \n    try:\n        storage = FileSystemStorage()\n        empty_content = b\"\"\n        empty_file = SimpleUploadedFile(\"empty_file.txt\", empty_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"empty_test.txt\", empty_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Empty file handled successfully: {file_size == 0}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Binary file upload\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Binary file upload (simulated image data)\")\n    \n    try:\n        storage = FileSystemStorage()\n        # Simulate binary image data\n        binary_content = bytes([i % 256 for i in range(1024)])  # 1KB of binary data\n        binary_file = SimpleUploadedFile(\"test_image.jpg\", binary_content, content_type=\"image/jpeg\")\n        \n        saved_name = storage.save(\"binary_test.jpg\", binary_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Content type: image/jpeg\")\n        print(f\"Binary file handled successfully: {file_size == 1024}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Consistency test between small and large files\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Consistency test: comparing permissions between small and large files\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Small file\n            small_content = b\"small\" * 100  # 500 bytes\n            small_file = SimpleUploadedFile(\"small_consistency.txt\", small_content, content_type=\"text/plain\")\n            small_saved = storage.save(\"small_consistency.txt\", small_file)\n            small_path = storage.path(small_saved)\n            small_permissions = get_file_permissions(small_path)\n            \n            # Large file (simulated temporary file behavior)\n            large_content = b\"large\" * 100000  # ~500KB\n            large_file = SimpleUploadedFile(\"large_consistency.txt\", large_content, content_type=\"text/plain\")\n            large_saved = storage.save(\"large_consistency.txt\", large_file)\n            large_path = storage.path(large_saved)\n            large_permissions = get_file_permissions(large_path)\n            \n            print(\"Output:\")\n            print(f\"Small file permissions: {small_permissions}\")\n            print(f\"Large file permissions: {large_permissions}\")\n            print(f\"Permissions are consistent: {small_permissions == large_permissions}\")\n            print(f\"Both match expected 0o644: {small_permissions == '0o644' and large_permissions == '0o644'}\")\n            \n            cleanup_file(small_path)\n            cleanup_file(large_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nSmall file upload (512 bytes) - should use InMemoryUploadedFile\nOutput:\nFile size: 512 bytes\nFile permissions: 0o644\nUpload type: InMemoryUploadedFile (small)\n\n### Test 2:\nInput:\nLarge file upload (3MB) - should use TemporaryUploadedFile\nOutput:\nFile size: 3145728 bytes\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nUpload type: TemporaryUploadedFile (large)\n\n### Test 3:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nExpected permissions: 0o644\nActual permissions: 0o644\nPermissions match expected: True\n\n### Test 4:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\nOutput:\nExpected permissions: 0o600\nActual permissions: 0o600\nPermissions match expected: True\n\n### Test 5:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\nOutput:\nExpected permissions: 0o755\nActual permissions: 0o755\nPermissions match expected: True\n\n### Test 6:\nInput:\nEmpty file upload - edge case\nOutput:\nFile size: 0 bytes\nFile permissions: 0o644\nEmpty file handled successfully: True\n\n### Test 7:\nInput:\nBinary file upload (simulated image data)\nOutput:\nFile size: 1024 bytes\nFile permissions: 0o644\nContent type: image/jpeg\nBinary file handled successfully: True\n\n### Test 8:\nInput:\nConsistency test: comparing permissions between small and large files\nOutput:\nSmall file permissions: 0o644\nLarge file permissions: 0o644\nPermissions are consistent: True\nBoth match expected 0o644: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nimport django\nfrom io import BytesIO\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5 MB default\n    )\n\ndjango.setup()\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Default behavior - no FILE_UPLOAD_PERMISSIONS setting\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default behavior without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Small file (uses SimpleUploadedFile/MemoryFileUploadHandler)\n        small_content = b\"small file content\"\n        small_file = SimpleUploadedFile(\"small.txt\", small_content)\n        small_saved = storage.save(\"small.txt\", small_file)\n        small_path = storage.path(small_saved)\n        small_perms = oct(os.stat(small_path).st_mode & 0o777)\n        \n        # Large file simulation (uses TemporaryUploadedFile)\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        large_content = b\"large file content\" * 1000\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        with open(temp_file.name, 'rb') as f:\n            temp_upload = TemporaryUploadedFile(\"large.txt\", \"text/plain\", len(large_content), \"utf-8\")\n            temp_upload.file = f\n            temp_upload.temporary_file_path = temp_file.name\n            large_saved = storage.save(\"large.txt\", temp_upload)\n            large_path = storage.path(large_saved)\n            large_perms = oct(os.stat(large_path).st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Small file permissions: {small_perms}\")\n        print(f\"Large file permissions: {large_perms}\")\n        print(f\"Permissions consistent: {small_perms == large_perms}\")\n        \n        # Cleanup\n        for path in [small_path, large_path, temp_file.name]:\n            if os.path.exists(path):\n                os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Explicit FILE_UPLOAD_PERMISSIONS=0o644\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 644 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test644.txt\", content)\n            saved_name = storage.save(\"test644.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Correct: {permissions == '0o644'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: Restrictive permissions FILE_UPLOAD_PERMISSIONS=0o600\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test with restrictive FILE_UPLOAD_PERMISSIONS=0o600\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 600 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test600.txt\", content)\n            saved_name = storage.save(\"test600.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o600\")\n            print(f\"Correct: {permissions == '0o600'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Permissive permissions FILE_UPLOAD_PERMISSIONS=0o666\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test with permissive FILE_UPLOAD_PERMISSIONS=0o666\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o666):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 666 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test666.txt\", content)\n            saved_name = storage.save(\"test666.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o666\")\n            print(f\"Correct: {permissions == '0o666'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: File size threshold testing - small file under memory limit\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # File smaller than threshold (should use memory handler)\n            small_content = b\"x\" * 512  # 512 bytes < 1024\n            small_file = SimpleUploadedFile(\"small_threshold.txt\", small_content)\n            saved_name = storage.save(\"small_threshold.txt\", small_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(small_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses memory handler: {len(small_content) < 1024}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: File size threshold testing - large file over memory limit\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # Create a temporary file larger than threshold\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            large_content = b\"x\" * 2048  # 2048 bytes > 1024\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            # Simulate temporary file upload\n            with open(temp_file.name, 'rb') as f:\n                temp_upload = TemporaryUploadedFile(\"large_threshold.txt\", \"text/plain\", len(large_content), \"utf-8\")\n                temp_upload.file = f\n                temp_upload.temporary_file_path = temp_file.name\n                saved_name = storage.save(\"large_threshold.txt\", temp_upload)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(large_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses temporary handler: {len(large_content) > 1024}\")\n            \n            # Cleanup\n            for path in [saved_path, temp_file.name]:\n                if os.path.exists(path):\n                    os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Multiple files with different sizes\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test multiple files of different sizes with consistent permissions\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            files_data = [\n                (\"tiny.txt\", b\"tiny\"),\n                (\"small.txt\", b\"small\" * 100),\n                (\"medium.txt\", b\"medium\" * 1000),\n            ]\n            \n            results = []\n            for filename, content in files_data:\n                uploaded_file = SimpleUploadedFile(filename, content)\n                saved_name = storage.save(filename, uploaded_file)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n                results.append((filename, len(content), permissions))\n                \n                if os.path.exists(saved_path):\n                    os.remove(saved_path)\n            \n            print(\"Output:\")\n            for filename, size, perms in results:\n                print(f\"{filename}: {size} bytes, permissions: {perms}\")\n            \n            all_same = len(set(perms for _, _, perms in results)) == 1\n            print(f\"All permissions consistent: {all_same}\")\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Custom storage location with permissions\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test custom storage location with FILE_UPLOAD_PERMISSIONS\")\n    \n    try:\n        custom_dir = tempfile.mkdtemp()\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage(location=custom_dir)\n            \n            content = b\"content for custom storage location\"\n            uploaded_file = SimpleUploadedFile(\"custom_storage.txt\", content)\n            saved_name = storage.save(\"custom_storage.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Custom storage directory: {custom_dir}\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Storage location works: {os.path.dirname(saved_path) == custom_dir}\")\n            \n            # Cleanup\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(custom_dir):\n                os.rmdir(custom_dir)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n        # Cleanup on error\n        if 'custom_dir' in locals() and os.path.exists(custom_dir):\n            try:\n                shutil.rmtree(custom_dir)\n            except:\n                pass\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Final cleanup\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default behavior without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nError: 'str' object is not callable\n\n### Test 2:\nInput:\nTest with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nFile permissions: 0o644\nExpected: 0o644\nCorrect: True\n\n### Test 3:\nInput:\nTest with restrictive FILE_UPLOAD_PERMISSIONS=0o600\nOutput:\nFile permissions: 0o600\nExpected: 0o600\nCorrect: True\n\n### Test 4:\nInput:\nTest with permissive FILE_UPLOAD_PERMISSIONS=0o666\nOutput:\nFile permissions: 0o666\nExpected: 0o666\nCorrect: True\n\n### Test 5:\nInput:\nTest small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nFile size: 512 bytes\nMemory threshold: 1024 bytes\nFile permissions: 0o644\nUses memory handler: True\n\n### Test 6:\nInput:\nTest large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nError: 'str' object is not callable\n\n### Test 7:\nInput:\nTest multiple files of different sizes with consistent permissions\nOutput:\ntiny.txt: 4 bytes, permissions: 0o644\nsmall.txt: 500 bytes, permissions: 0o644\nmedium.txt: 6000 bytes, permissions: 0o644\nAll permissions consistent: True\n\n### Test 8:\nInput:\nTest custom storage location with FILE_UPLOAD_PERMISSIONS\nOutput:\nCustom storage directory: /tmp/tmpzjxnbw42\nFile permissions: 0o644\nExpected: 0o644\nStorage location works: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary files\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely cleanup files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        # Test without FILE_UPLOAD_PERMISSIONS set (should use system default)\n        storage = FileSystemStorage()\n        \n        # Create large content to force TemporaryUploadedFile usage\n        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        class MockTemporaryUploadedFile:\n            def __init__(self, temp_path, name):\n                self.temporary_file_path = temp_path\n                self.name = name\n                self._file = open(temp_path, 'rb')\n            \n            def read(self, size=-1):\n                return self._file.read(size)\n            \n            def close(self):\n                self._file.close()\n        \n        mock_file = MockTemporaryUploadedFile(temp_file.name, \"test1.txt\")\n        saved_name = storage.save(\"test1.txt\", mock_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(f\"TemporaryUploadedFile permissions without setting: {final_permissions}\")\n        print(f\"FILE_UPLOAD_PERMISSIONS setting: {getattr(settings, 'FILE_UPLOAD_PERMISSIONS', 'Not set')}\")\n        \n        mock_file.close()\n        cleanup_file(saved_path)\n        cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            large_content = b\"y\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"test2.txt\")\n            saved_name = storage.save(\"test2.txt\", mock_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"TemporaryUploadedFile permissions with 0o644: {final_permissions}\")\n            print(f\"Expected: 0o644, Got: {final_permissions}, Match: {final_permissions == '0o644'}\")\n            \n            mock_file.close()\n            cleanup_file(saved_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"restrictive content\"\n            simple_file = SimpleUploadedFile(\"test3.txt\", content)\n            \n            saved_name = storage.save(\"test3.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Restrictive permissions (0o600): {final_permissions}\")\n            print(f\"Expected: 0o600, Got: {final_permissions}, Match: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            \n            content = b\"permissive content\"\n            simple_file = SimpleUploadedFile(\"test4.txt\", content)\n            \n            saved_name = storage.save(\"test4.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissive permissions (0o755): {final_permissions}\")\n            print(f\"Expected: 0o755, Got: {final_permissions}, Match: {final_permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Test SimpleUploadedFile\n            simple_content = b\"simple content\"\n            simple_file = SimpleUploadedFile(\"simple.txt\", simple_content)\n            simple_saved = storage.save(\"simple.txt\", simple_file)\n            simple_path = storage.path(simple_saved)\n            simple_permissions = oct(os.stat(simple_path).st_mode & 0o777)\n            \n            # Test TemporaryUploadedFile simulation\n            temp_content = b\"z\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(temp_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"temp.txt\")\n            temp_saved = storage.save(\"temp.txt\", mock_file)\n            temp_path = storage.path(temp_saved)\n            temp_permissions = oct(os.stat(temp_path).st_mode & 0o777)\n            \n            print(f\"SimpleUploadedFile permissions: {simple_permissions}\")\n            print(f\"TemporaryUploadedFile permissions: {temp_permissions}\")\n            print(f\"Permissions consistent: {simple_permissions == temp_permissions}\")\n            \n            mock_file.close()\n            cleanup_file(simple_path)\n            cleanup_file(temp_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=None):\n            storage = FileSystemStorage()\n            \n            content = b\"null permission content\"\n            simple_file = SimpleUploadedFile(\"test6.txt\", content)\n            \n            saved_name = storage.save(\"test6.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissions with None setting: {final_permissions}\")\n            print(f\"FILE_UPLOAD_PERMISSIONS: {settings.FILE_UPLOAD_PERMISSIONS}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test custom FileSystemStorage with file_permissions_mode override\")\n    print(\"Output:\")\n    \n    try:\n        # Test storage-level permission override\n        custom_storage = FileSystemStorage(file_permissions_mode=0o600)\n        \n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            content = b\"custom storage content\"\n            simple_file = SimpleUploadedFile(\"test7.txt\", content)\n            \n            saved_name = custom_storage.save(\"test7.txt\", simple_file)\n            saved_path = custom_storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Storage-level override permissions: {final_permissions}\")\n            print(f\"Global setting: 0o644, Storage override: 0o600\")\n            print(f\"Uses storage override: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test edge case with zero-byte file\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Zero-byte file\n            empty_content = b\"\"\n            empty_file = SimpleUploadedFile(\"empty.txt\", empty_content)\n            \n            saved_name = storage.save(\"empty.txt\", empty_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            file_size = final_stat.st_size\n            \n            print(f\"Zero-byte file permissions: {final_permissions}\")\n            print(f\"File size: {file_size} bytes\")\n            print(f\"Permissions set correctly: {final_permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions without setting: 0o644\nFILE_UPLOAD_PERMISSIONS setting: 420\n\n### Test 2:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions with 0o644: 0o644\nExpected: 0o644, Got: 0o644, Match: True\n\n### Test 3:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\nOutput:\nRestrictive permissions (0o600): 0o600\nExpected: 0o600, Got: 0o600, Match: True\n\n### Test 4:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\nOutput:\nPermissive permissions (0o755): 0o755\nExpected: 0o755, Got: 0o755, Match: True\n\n### Test 5:\nInput:\nTest consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\nOutput:\nSimpleUploadedFile permissions: 0o644\nTemporaryUploadedFile permissions: 0o644\nPermissions consistent: True\n\n### Test 6:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\nOutput:\nPermissions with None setting: 0o664\nFILE_UPLOAD_PERMISSIONS: None\n\n### Test 7:\nInput:\nTest custom FileSystemStorage with file_permissions_mode override\nOutput:\nStorage-level override permissions: 0o600\nGlobal setting: 0o644, Storage override: 0o600\nUses storage override: True\n\n### Test 8:\nInput:\nTest edge case with zero-byte file\nOutput:\nZero-byte file permissions: 0o644\nFile size: 0 bytes\nPermissions set correctly: True\n\n", "stderr": ""}]}
{"patch_content": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n", "repro_stdout": "### Test 1:\nInput:\nRegular file creation to show baseline permissions\nOutput:\nRegular file permissions: 0o664\n\n### Test 2:\nInput:\nNamedTemporaryFile creation to show restrictive permissions\nOutput:\nTemp file permissions: 0o600\n\n### Test 3:\nInput:\nSimulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nPermissions preserved from temp: False\n\n### Test 4:\nInput:\nSimulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nExpected permissions: 0o644\nCorrectly set to expected: True\n\n### Test 5:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\nOutput:\nSimpleUploadedFile final permissions: 0o644\nNo temp file involved - uses default file creation permissions\n\n", "repro_stderr": "", "differential_test": [{"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, InMemoryUploadedFile\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nfrom django.test.utils import override_settings\nfrom io import BytesIO\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5MB default\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely remove files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef get_file_permissions(filepath):\n    \"\"\"Helper to get file permissions\"\"\"\n    try:\n        stat_info = os.stat(filepath)\n        return oct(stat_info.st_mode & 0o777)\n    except:\n        return \"N/A\"\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Small file upload (in-memory) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Small file upload (512 bytes) - should use InMemoryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        small_content = b\"x\" * 512  # Small file, should stay in memory\n        small_file = SimpleUploadedFile(\"small_file.txt\", small_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"small_test.txt\", small_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Upload type: InMemoryUploadedFile (small)\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Large file upload (temporary file) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Large file upload (3MB) - should use TemporaryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        large_content = b\"x\" * (3 * 1024 * 1024)  # 3MB file, should go to temp file\n        large_file = SimpleUploadedFile(\"large_file.txt\", large_content, content_type=\"text/plain\")\n        \n        # Simulate what happens with TemporaryUploadedFile\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        temp_permissions = get_file_permissions(temp_file.name)\n        \n        # Now save it through storage\n        with open(temp_file.name, 'rb') as f:\n            saved_name = storage.save(\"large_test.txt\", f)\n            saved_path = storage.path(saved_name)\n        \n        final_permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Upload type: TemporaryUploadedFile (large)\")\n        \n        cleanup_file(temp_file.name)\n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: FILE_UPLOAD_PERMISSIONS set to 0o644\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            content = b\"test content with permissions\"\n            test_file = SimpleUploadedFile(\"perm_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"perm_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: FILE_UPLOAD_PERMISSIONS set to 0o600 (restrictive)\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            content = b\"restrictive permissions test\"\n            test_file = SimpleUploadedFile(\"restrictive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"restrictive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o600\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: FILE_UPLOAD_PERMISSIONS set to 0o755 (permissive)\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            content = b\"permissive permissions test\"\n            test_file = SimpleUploadedFile(\"permissive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"permissive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o755\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: Empty file upload\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Empty file upload - edge case\")\n    \n    try:\n        storage = FileSystemStorage()\n        empty_content = b\"\"\n        empty_file = SimpleUploadedFile(\"empty_file.txt\", empty_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"empty_test.txt\", empty_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Empty file handled successfully: {file_size == 0}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Binary file upload\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Binary file upload (simulated image data)\")\n    \n    try:\n        storage = FileSystemStorage()\n        # Simulate binary image data\n        binary_content = bytes([i % 256 for i in range(1024)])  # 1KB of binary data\n        binary_file = SimpleUploadedFile(\"test_image.jpg\", binary_content, content_type=\"image/jpeg\")\n        \n        saved_name = storage.save(\"binary_test.jpg\", binary_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Content type: image/jpeg\")\n        print(f\"Binary file handled successfully: {file_size == 1024}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Consistency test between small and large files\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Consistency test: comparing permissions between small and large files\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Small file\n            small_content = b\"small\" * 100  # 500 bytes\n            small_file = SimpleUploadedFile(\"small_consistency.txt\", small_content, content_type=\"text/plain\")\n            small_saved = storage.save(\"small_consistency.txt\", small_file)\n            small_path = storage.path(small_saved)\n            small_permissions = get_file_permissions(small_path)\n            \n            # Large file (simulated temporary file behavior)\n            large_content = b\"large\" * 100000  # ~500KB\n            large_file = SimpleUploadedFile(\"large_consistency.txt\", large_content, content_type=\"text/plain\")\n            large_saved = storage.save(\"large_consistency.txt\", large_file)\n            large_path = storage.path(large_saved)\n            large_permissions = get_file_permissions(large_path)\n            \n            print(\"Output:\")\n            print(f\"Small file permissions: {small_permissions}\")\n            print(f\"Large file permissions: {large_permissions}\")\n            print(f\"Permissions are consistent: {small_permissions == large_permissions}\")\n            print(f\"Both match expected 0o644: {small_permissions == '0o644' and large_permissions == '0o644'}\")\n            \n            cleanup_file(small_path)\n            cleanup_file(large_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nSmall file upload (512 bytes) - should use InMemoryUploadedFile\nOutput:\nFile size: 512 bytes\nFile permissions: 0o644\nUpload type: InMemoryUploadedFile (small)\n\n### Test 2:\nInput:\nLarge file upload (3MB) - should use TemporaryUploadedFile\nOutput:\nFile size: 3145728 bytes\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nUpload type: TemporaryUploadedFile (large)\n\n### Test 3:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nExpected permissions: 0o644\nActual permissions: 0o644\nPermissions match expected: True\n\n### Test 4:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\nOutput:\nExpected permissions: 0o600\nActual permissions: 0o600\nPermissions match expected: True\n\n### Test 5:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\nOutput:\nExpected permissions: 0o755\nActual permissions: 0o755\nPermissions match expected: True\n\n### Test 6:\nInput:\nEmpty file upload - edge case\nOutput:\nFile size: 0 bytes\nFile permissions: 0o644\nEmpty file handled successfully: True\n\n### Test 7:\nInput:\nBinary file upload (simulated image data)\nOutput:\nFile size: 1024 bytes\nFile permissions: 0o644\nContent type: image/jpeg\nBinary file handled successfully: True\n\n### Test 8:\nInput:\nConsistency test: comparing permissions between small and large files\nOutput:\nSmall file permissions: 0o644\nLarge file permissions: 0o644\nPermissions are consistent: True\nBoth match expected 0o644: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nimport django\nfrom io import BytesIO\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5 MB default\n    )\n\ndjango.setup()\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Default behavior - no FILE_UPLOAD_PERMISSIONS setting\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default behavior without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Small file (uses SimpleUploadedFile/MemoryFileUploadHandler)\n        small_content = b\"small file content\"\n        small_file = SimpleUploadedFile(\"small.txt\", small_content)\n        small_saved = storage.save(\"small.txt\", small_file)\n        small_path = storage.path(small_saved)\n        small_perms = oct(os.stat(small_path).st_mode & 0o777)\n        \n        # Large file simulation (uses TemporaryUploadedFile)\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        large_content = b\"large file content\" * 1000\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        with open(temp_file.name, 'rb') as f:\n            temp_upload = TemporaryUploadedFile(\"large.txt\", \"text/plain\", len(large_content), \"utf-8\")\n            temp_upload.file = f\n            temp_upload.temporary_file_path = temp_file.name\n            large_saved = storage.save(\"large.txt\", temp_upload)\n            large_path = storage.path(large_saved)\n            large_perms = oct(os.stat(large_path).st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Small file permissions: {small_perms}\")\n        print(f\"Large file permissions: {large_perms}\")\n        print(f\"Permissions consistent: {small_perms == large_perms}\")\n        \n        # Cleanup\n        for path in [small_path, large_path, temp_file.name]:\n            if os.path.exists(path):\n                os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Explicit FILE_UPLOAD_PERMISSIONS=0o644\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 644 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test644.txt\", content)\n            saved_name = storage.save(\"test644.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Correct: {permissions == '0o644'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: Restrictive permissions FILE_UPLOAD_PERMISSIONS=0o600\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test with restrictive FILE_UPLOAD_PERMISSIONS=0o600\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 600 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test600.txt\", content)\n            saved_name = storage.save(\"test600.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o600\")\n            print(f\"Correct: {permissions == '0o600'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Permissive permissions FILE_UPLOAD_PERMISSIONS=0o666\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test with permissive FILE_UPLOAD_PERMISSIONS=0o666\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o666):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 666 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test666.txt\", content)\n            saved_name = storage.save(\"test666.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o666\")\n            print(f\"Correct: {permissions == '0o666'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: File size threshold testing - small file under memory limit\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # File smaller than threshold (should use memory handler)\n            small_content = b\"x\" * 512  # 512 bytes < 1024\n            small_file = SimpleUploadedFile(\"small_threshold.txt\", small_content)\n            saved_name = storage.save(\"small_threshold.txt\", small_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(small_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses memory handler: {len(small_content) < 1024}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: File size threshold testing - large file over memory limit\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # Create a temporary file larger than threshold\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            large_content = b\"x\" * 2048  # 2048 bytes > 1024\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            # Simulate temporary file upload\n            with open(temp_file.name, 'rb') as f:\n                temp_upload = TemporaryUploadedFile(\"large_threshold.txt\", \"text/plain\", len(large_content), \"utf-8\")\n                temp_upload.file = f\n                temp_upload.temporary_file_path = temp_file.name\n                saved_name = storage.save(\"large_threshold.txt\", temp_upload)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(large_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses temporary handler: {len(large_content) > 1024}\")\n            \n            # Cleanup\n            for path in [saved_path, temp_file.name]:\n                if os.path.exists(path):\n                    os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Multiple files with different sizes\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test multiple files of different sizes with consistent permissions\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            files_data = [\n                (\"tiny.txt\", b\"tiny\"),\n                (\"small.txt\", b\"small\" * 100),\n                (\"medium.txt\", b\"medium\" * 1000),\n            ]\n            \n            results = []\n            for filename, content in files_data:\n                uploaded_file = SimpleUploadedFile(filename, content)\n                saved_name = storage.save(filename, uploaded_file)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n                results.append((filename, len(content), permissions))\n                \n                if os.path.exists(saved_path):\n                    os.remove(saved_path)\n            \n            print(\"Output:\")\n            for filename, size, perms in results:\n                print(f\"{filename}: {size} bytes, permissions: {perms}\")\n            \n            all_same = len(set(perms for _, _, perms in results)) == 1\n            print(f\"All permissions consistent: {all_same}\")\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Custom storage location with permissions\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test custom storage location with FILE_UPLOAD_PERMISSIONS\")\n    \n    try:\n        custom_dir = tempfile.mkdtemp()\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage(location=custom_dir)\n            \n            content = b\"content for custom storage location\"\n            uploaded_file = SimpleUploadedFile(\"custom_storage.txt\", content)\n            saved_name = storage.save(\"custom_storage.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Custom storage directory: {custom_dir}\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Storage location works: {os.path.dirname(saved_path) == custom_dir}\")\n            \n            # Cleanup\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(custom_dir):\n                os.rmdir(custom_dir)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n        # Cleanup on error\n        if 'custom_dir' in locals() and os.path.exists(custom_dir):\n            try:\n                shutil.rmtree(custom_dir)\n            except:\n                pass\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Final cleanup\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default behavior without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nError: 'str' object is not callable\n\n### Test 2:\nInput:\nTest with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nFile permissions: 0o644\nExpected: 0o644\nCorrect: True\n\n### Test 3:\nInput:\nTest with restrictive FILE_UPLOAD_PERMISSIONS=0o600\nOutput:\nFile permissions: 0o600\nExpected: 0o600\nCorrect: True\n\n### Test 4:\nInput:\nTest with permissive FILE_UPLOAD_PERMISSIONS=0o666\nOutput:\nFile permissions: 0o666\nExpected: 0o666\nCorrect: True\n\n### Test 5:\nInput:\nTest small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nFile size: 512 bytes\nMemory threshold: 1024 bytes\nFile permissions: 0o644\nUses memory handler: True\n\n### Test 6:\nInput:\nTest large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nError: 'str' object is not callable\n\n### Test 7:\nInput:\nTest multiple files of different sizes with consistent permissions\nOutput:\ntiny.txt: 4 bytes, permissions: 0o644\nsmall.txt: 500 bytes, permissions: 0o644\nmedium.txt: 6000 bytes, permissions: 0o644\nAll permissions consistent: True\n\n### Test 8:\nInput:\nTest custom storage location with FILE_UPLOAD_PERMISSIONS\nOutput:\nCustom storage directory: /tmp/tmpr2cb2_2k\nFile permissions: 0o644\nExpected: 0o644\nStorage location works: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary files\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely cleanup files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        # Test without FILE_UPLOAD_PERMISSIONS set (should use system default)\n        storage = FileSystemStorage()\n        \n        # Create large content to force TemporaryUploadedFile usage\n        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        class MockTemporaryUploadedFile:\n            def __init__(self, temp_path, name):\n                self.temporary_file_path = temp_path\n                self.name = name\n                self._file = open(temp_path, 'rb')\n            \n            def read(self, size=-1):\n                return self._file.read(size)\n            \n            def close(self):\n                self._file.close()\n        \n        mock_file = MockTemporaryUploadedFile(temp_file.name, \"test1.txt\")\n        saved_name = storage.save(\"test1.txt\", mock_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(f\"TemporaryUploadedFile permissions without setting: {final_permissions}\")\n        print(f\"FILE_UPLOAD_PERMISSIONS setting: {getattr(settings, 'FILE_UPLOAD_PERMISSIONS', 'Not set')}\")\n        \n        mock_file.close()\n        cleanup_file(saved_path)\n        cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            large_content = b\"y\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"test2.txt\")\n            saved_name = storage.save(\"test2.txt\", mock_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"TemporaryUploadedFile permissions with 0o644: {final_permissions}\")\n            print(f\"Expected: 0o644, Got: {final_permissions}, Match: {final_permissions == '0o644'}\")\n            \n            mock_file.close()\n            cleanup_file(saved_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"restrictive content\"\n            simple_file = SimpleUploadedFile(\"test3.txt\", content)\n            \n            saved_name = storage.save(\"test3.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Restrictive permissions (0o600): {final_permissions}\")\n            print(f\"Expected: 0o600, Got: {final_permissions}, Match: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            \n            content = b\"permissive content\"\n            simple_file = SimpleUploadedFile(\"test4.txt\", content)\n            \n            saved_name = storage.save(\"test4.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissive permissions (0o755): {final_permissions}\")\n            print(f\"Expected: 0o755, Got: {final_permissions}, Match: {final_permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Test SimpleUploadedFile\n            simple_content = b\"simple content\"\n            simple_file = SimpleUploadedFile(\"simple.txt\", simple_content)\n            simple_saved = storage.save(\"simple.txt\", simple_file)\n            simple_path = storage.path(simple_saved)\n            simple_permissions = oct(os.stat(simple_path).st_mode & 0o777)\n            \n            # Test TemporaryUploadedFile simulation\n            temp_content = b\"z\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(temp_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"temp.txt\")\n            temp_saved = storage.save(\"temp.txt\", mock_file)\n            temp_path = storage.path(temp_saved)\n            temp_permissions = oct(os.stat(temp_path).st_mode & 0o777)\n            \n            print(f\"SimpleUploadedFile permissions: {simple_permissions}\")\n            print(f\"TemporaryUploadedFile permissions: {temp_permissions}\")\n            print(f\"Permissions consistent: {simple_permissions == temp_permissions}\")\n            \n            mock_file.close()\n            cleanup_file(simple_path)\n            cleanup_file(temp_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=None):\n            storage = FileSystemStorage()\n            \n            content = b\"null permission content\"\n            simple_file = SimpleUploadedFile(\"test6.txt\", content)\n            \n            saved_name = storage.save(\"test6.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissions with None setting: {final_permissions}\")\n            print(f\"FILE_UPLOAD_PERMISSIONS: {settings.FILE_UPLOAD_PERMISSIONS}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test custom FileSystemStorage with file_permissions_mode override\")\n    print(\"Output:\")\n    \n    try:\n        # Test storage-level permission override\n        custom_storage = FileSystemStorage(file_permissions_mode=0o600)\n        \n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            content = b\"custom storage content\"\n            simple_file = SimpleUploadedFile(\"test7.txt\", content)\n            \n            saved_name = custom_storage.save(\"test7.txt\", simple_file)\n            saved_path = custom_storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Storage-level override permissions: {final_permissions}\")\n            print(f\"Global setting: 0o644, Storage override: 0o600\")\n            print(f\"Uses storage override: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test edge case with zero-byte file\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Zero-byte file\n            empty_content = b\"\"\n            empty_file = SimpleUploadedFile(\"empty.txt\", empty_content)\n            \n            saved_name = storage.save(\"empty.txt\", empty_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            file_size = final_stat.st_size\n            \n            print(f\"Zero-byte file permissions: {final_permissions}\")\n            print(f\"File size: {file_size} bytes\")\n            print(f\"Permissions set correctly: {final_permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions without setting: 0o644\nFILE_UPLOAD_PERMISSIONS setting: 420\n\n### Test 2:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions with 0o644: 0o644\nExpected: 0o644, Got: 0o644, Match: True\n\n### Test 3:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\nOutput:\nRestrictive permissions (0o600): 0o600\nExpected: 0o600, Got: 0o600, Match: True\n\n### Test 4:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\nOutput:\nPermissive permissions (0o755): 0o755\nExpected: 0o755, Got: 0o755, Match: True\n\n### Test 5:\nInput:\nTest consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\nOutput:\nSimpleUploadedFile permissions: 0o644\nTemporaryUploadedFile permissions: 0o644\nPermissions consistent: True\n\n### Test 6:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\nOutput:\nPermissions with None setting: 0o664\nFILE_UPLOAD_PERMISSIONS: None\n\n### Test 7:\nInput:\nTest custom FileSystemStorage with file_permissions_mode override\nOutput:\nStorage-level override permissions: 0o600\nGlobal setting: 0o644, Storage override: 0o600\nUses storage override: True\n\n### Test 8:\nInput:\nTest edge case with zero-byte file\nOutput:\nZero-byte file permissions: 0o644\nFile size: 0 bytes\nPermissions set correctly: True\n\n", "stderr": ""}]}
{"patch_content": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..f8ac2ce556 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -214,7 +214,12 @@ class FileSystemStorage(Storage):\n \n     @cached_property\n     def file_permissions_mode(self):\n-        return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)\n+        mode = self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)\n+        # Default to 0o644 on POSIX systems when no explicit permission is set\n+        # This ensures consistent permissions for both small and large file uploads\n+        if mode is None and os.name != 'nt':\n+            return 0o644\n+        return mode\n \n     @cached_property\n     def directory_permissions_mode(self):\n", "repro_stdout": "### Test 1:\nInput:\nRegular file creation to show baseline permissions\nOutput:\nRegular file permissions: 0o664\n\n### Test 2:\nInput:\nNamedTemporaryFile creation to show restrictive permissions\nOutput:\nTemp file permissions: 0o600\n\n### Test 3:\nInput:\nSimulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nPermissions preserved from temp: False\n\n### Test 4:\nInput:\nSimulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nExpected permissions: 0o644\nCorrectly set to expected: True\n\n### Test 5:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\nOutput:\nSimpleUploadedFile final permissions: 0o644\nNo temp file involved - uses default file creation permissions\n\n", "repro_stderr": "", "differential_test": [{"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, InMemoryUploadedFile\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nfrom django.test.utils import override_settings\nfrom io import BytesIO\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5MB default\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely remove files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef get_file_permissions(filepath):\n    \"\"\"Helper to get file permissions\"\"\"\n    try:\n        stat_info = os.stat(filepath)\n        return oct(stat_info.st_mode & 0o777)\n    except:\n        return \"N/A\"\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Small file upload (in-memory) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Small file upload (512 bytes) - should use InMemoryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        small_content = b\"x\" * 512  # Small file, should stay in memory\n        small_file = SimpleUploadedFile(\"small_file.txt\", small_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"small_test.txt\", small_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Upload type: InMemoryUploadedFile (small)\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Large file upload (temporary file) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Large file upload (3MB) - should use TemporaryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        large_content = b\"x\" * (3 * 1024 * 1024)  # 3MB file, should go to temp file\n        large_file = SimpleUploadedFile(\"large_file.txt\", large_content, content_type=\"text/plain\")\n        \n        # Simulate what happens with TemporaryUploadedFile\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        temp_permissions = get_file_permissions(temp_file.name)\n        \n        # Now save it through storage\n        with open(temp_file.name, 'rb') as f:\n            saved_name = storage.save(\"large_test.txt\", f)\n            saved_path = storage.path(saved_name)\n        \n        final_permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Upload type: TemporaryUploadedFile (large)\")\n        \n        cleanup_file(temp_file.name)\n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: FILE_UPLOAD_PERMISSIONS set to 0o644\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            content = b\"test content with permissions\"\n            test_file = SimpleUploadedFile(\"perm_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"perm_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: FILE_UPLOAD_PERMISSIONS set to 0o600 (restrictive)\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            content = b\"restrictive permissions test\"\n            test_file = SimpleUploadedFile(\"restrictive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"restrictive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o600\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: FILE_UPLOAD_PERMISSIONS set to 0o755 (permissive)\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            content = b\"permissive permissions test\"\n            test_file = SimpleUploadedFile(\"permissive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"permissive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o755\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: Empty file upload\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Empty file upload - edge case\")\n    \n    try:\n        storage = FileSystemStorage()\n        empty_content = b\"\"\n        empty_file = SimpleUploadedFile(\"empty_file.txt\", empty_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"empty_test.txt\", empty_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Empty file handled successfully: {file_size == 0}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Binary file upload\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Binary file upload (simulated image data)\")\n    \n    try:\n        storage = FileSystemStorage()\n        # Simulate binary image data\n        binary_content = bytes([i % 256 for i in range(1024)])  # 1KB of binary data\n        binary_file = SimpleUploadedFile(\"test_image.jpg\", binary_content, content_type=\"image/jpeg\")\n        \n        saved_name = storage.save(\"binary_test.jpg\", binary_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Content type: image/jpeg\")\n        print(f\"Binary file handled successfully: {file_size == 1024}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Consistency test between small and large files\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Consistency test: comparing permissions between small and large files\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Small file\n            small_content = b\"small\" * 100  # 500 bytes\n            small_file = SimpleUploadedFile(\"small_consistency.txt\", small_content, content_type=\"text/plain\")\n            small_saved = storage.save(\"small_consistency.txt\", small_file)\n            small_path = storage.path(small_saved)\n            small_permissions = get_file_permissions(small_path)\n            \n            # Large file (simulated temporary file behavior)\n            large_content = b\"large\" * 100000  # ~500KB\n            large_file = SimpleUploadedFile(\"large_consistency.txt\", large_content, content_type=\"text/plain\")\n            large_saved = storage.save(\"large_consistency.txt\", large_file)\n            large_path = storage.path(large_saved)\n            large_permissions = get_file_permissions(large_path)\n            \n            print(\"Output:\")\n            print(f\"Small file permissions: {small_permissions}\")\n            print(f\"Large file permissions: {large_permissions}\")\n            print(f\"Permissions are consistent: {small_permissions == large_permissions}\")\n            print(f\"Both match expected 0o644: {small_permissions == '0o644' and large_permissions == '0o644'}\")\n            \n            cleanup_file(small_path)\n            cleanup_file(large_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nSmall file upload (512 bytes) - should use InMemoryUploadedFile\nOutput:\nFile size: 512 bytes\nFile permissions: 0o644\nUpload type: InMemoryUploadedFile (small)\n\n### Test 2:\nInput:\nLarge file upload (3MB) - should use TemporaryUploadedFile\nOutput:\nFile size: 3145728 bytes\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nUpload type: TemporaryUploadedFile (large)\n\n### Test 3:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nExpected permissions: 0o644\nActual permissions: 0o644\nPermissions match expected: True\n\n### Test 4:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\nOutput:\nExpected permissions: 0o600\nActual permissions: 0o600\nPermissions match expected: True\n\n### Test 5:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\nOutput:\nExpected permissions: 0o755\nActual permissions: 0o755\nPermissions match expected: True\n\n### Test 6:\nInput:\nEmpty file upload - edge case\nOutput:\nFile size: 0 bytes\nFile permissions: 0o644\nEmpty file handled successfully: True\n\n### Test 7:\nInput:\nBinary file upload (simulated image data)\nOutput:\nFile size: 1024 bytes\nFile permissions: 0o644\nContent type: image/jpeg\nBinary file handled successfully: True\n\n### Test 8:\nInput:\nConsistency test: comparing permissions between small and large files\nOutput:\nSmall file permissions: 0o644\nLarge file permissions: 0o644\nPermissions are consistent: True\nBoth match expected 0o644: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nimport django\nfrom io import BytesIO\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5 MB default\n    )\n\ndjango.setup()\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Default behavior - no FILE_UPLOAD_PERMISSIONS setting\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default behavior without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Small file (uses SimpleUploadedFile/MemoryFileUploadHandler)\n        small_content = b\"small file content\"\n        small_file = SimpleUploadedFile(\"small.txt\", small_content)\n        small_saved = storage.save(\"small.txt\", small_file)\n        small_path = storage.path(small_saved)\n        small_perms = oct(os.stat(small_path).st_mode & 0o777)\n        \n        # Large file simulation (uses TemporaryUploadedFile)\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        large_content = b\"large file content\" * 1000\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        with open(temp_file.name, 'rb') as f:\n            temp_upload = TemporaryUploadedFile(\"large.txt\", \"text/plain\", len(large_content), \"utf-8\")\n            temp_upload.file = f\n            temp_upload.temporary_file_path = temp_file.name\n            large_saved = storage.save(\"large.txt\", temp_upload)\n            large_path = storage.path(large_saved)\n            large_perms = oct(os.stat(large_path).st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Small file permissions: {small_perms}\")\n        print(f\"Large file permissions: {large_perms}\")\n        print(f\"Permissions consistent: {small_perms == large_perms}\")\n        \n        # Cleanup\n        for path in [small_path, large_path, temp_file.name]:\n            if os.path.exists(path):\n                os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Explicit FILE_UPLOAD_PERMISSIONS=0o644\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 644 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test644.txt\", content)\n            saved_name = storage.save(\"test644.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Correct: {permissions == '0o644'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: Restrictive permissions FILE_UPLOAD_PERMISSIONS=0o600\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test with restrictive FILE_UPLOAD_PERMISSIONS=0o600\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 600 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test600.txt\", content)\n            saved_name = storage.save(\"test600.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o600\")\n            print(f\"Correct: {permissions == '0o600'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Permissive permissions FILE_UPLOAD_PERMISSIONS=0o666\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test with permissive FILE_UPLOAD_PERMISSIONS=0o666\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o666):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 666 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test666.txt\", content)\n            saved_name = storage.save(\"test666.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o666\")\n            print(f\"Correct: {permissions == '0o666'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: File size threshold testing - small file under memory limit\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # File smaller than threshold (should use memory handler)\n            small_content = b\"x\" * 512  # 512 bytes < 1024\n            small_file = SimpleUploadedFile(\"small_threshold.txt\", small_content)\n            saved_name = storage.save(\"small_threshold.txt\", small_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(small_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses memory handler: {len(small_content) < 1024}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: File size threshold testing - large file over memory limit\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # Create a temporary file larger than threshold\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            large_content = b\"x\" * 2048  # 2048 bytes > 1024\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            # Simulate temporary file upload\n            with open(temp_file.name, 'rb') as f:\n                temp_upload = TemporaryUploadedFile(\"large_threshold.txt\", \"text/plain\", len(large_content), \"utf-8\")\n                temp_upload.file = f\n                temp_upload.temporary_file_path = temp_file.name\n                saved_name = storage.save(\"large_threshold.txt\", temp_upload)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(large_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses temporary handler: {len(large_content) > 1024}\")\n            \n            # Cleanup\n            for path in [saved_path, temp_file.name]:\n                if os.path.exists(path):\n                    os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Multiple files with different sizes\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test multiple files of different sizes with consistent permissions\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            files_data = [\n                (\"tiny.txt\", b\"tiny\"),\n                (\"small.txt\", b\"small\" * 100),\n                (\"medium.txt\", b\"medium\" * 1000),\n            ]\n            \n            results = []\n            for filename, content in files_data:\n                uploaded_file = SimpleUploadedFile(filename, content)\n                saved_name = storage.save(filename, uploaded_file)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n                results.append((filename, len(content), permissions))\n                \n                if os.path.exists(saved_path):\n                    os.remove(saved_path)\n            \n            print(\"Output:\")\n            for filename, size, perms in results:\n                print(f\"{filename}: {size} bytes, permissions: {perms}\")\n            \n            all_same = len(set(perms for _, _, perms in results)) == 1\n            print(f\"All permissions consistent: {all_same}\")\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Custom storage location with permissions\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test custom storage location with FILE_UPLOAD_PERMISSIONS\")\n    \n    try:\n        custom_dir = tempfile.mkdtemp()\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage(location=custom_dir)\n            \n            content = b\"content for custom storage location\"\n            uploaded_file = SimpleUploadedFile(\"custom_storage.txt\", content)\n            saved_name = storage.save(\"custom_storage.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Custom storage directory: {custom_dir}\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Storage location works: {os.path.dirname(saved_path) == custom_dir}\")\n            \n            # Cleanup\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(custom_dir):\n                os.rmdir(custom_dir)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n        # Cleanup on error\n        if 'custom_dir' in locals() and os.path.exists(custom_dir):\n            try:\n                shutil.rmtree(custom_dir)\n            except:\n                pass\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Final cleanup\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default behavior without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nError: 'str' object is not callable\n\n### Test 2:\nInput:\nTest with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nFile permissions: 0o644\nExpected: 0o644\nCorrect: True\n\n### Test 3:\nInput:\nTest with restrictive FILE_UPLOAD_PERMISSIONS=0o600\nOutput:\nFile permissions: 0o600\nExpected: 0o600\nCorrect: True\n\n### Test 4:\nInput:\nTest with permissive FILE_UPLOAD_PERMISSIONS=0o666\nOutput:\nFile permissions: 0o666\nExpected: 0o666\nCorrect: True\n\n### Test 5:\nInput:\nTest small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nFile size: 512 bytes\nMemory threshold: 1024 bytes\nFile permissions: 0o644\nUses memory handler: True\n\n### Test 6:\nInput:\nTest large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nError: 'str' object is not callable\n\n### Test 7:\nInput:\nTest multiple files of different sizes with consistent permissions\nOutput:\ntiny.txt: 4 bytes, permissions: 0o644\nsmall.txt: 500 bytes, permissions: 0o644\nmedium.txt: 6000 bytes, permissions: 0o644\nAll permissions consistent: True\n\n### Test 8:\nInput:\nTest custom storage location with FILE_UPLOAD_PERMISSIONS\nOutput:\nCustom storage directory: /tmp/tmp9f2g9dot\nFile permissions: 0o644\nExpected: 0o644\nStorage location works: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary files\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely cleanup files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        # Test without FILE_UPLOAD_PERMISSIONS set (should use system default)\n        storage = FileSystemStorage()\n        \n        # Create large content to force TemporaryUploadedFile usage\n        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        class MockTemporaryUploadedFile:\n            def __init__(self, temp_path, name):\n                self.temporary_file_path = temp_path\n                self.name = name\n                self._file = open(temp_path, 'rb')\n            \n            def read(self, size=-1):\n                return self._file.read(size)\n            \n            def close(self):\n                self._file.close()\n        \n        mock_file = MockTemporaryUploadedFile(temp_file.name, \"test1.txt\")\n        saved_name = storage.save(\"test1.txt\", mock_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(f\"TemporaryUploadedFile permissions without setting: {final_permissions}\")\n        print(f\"FILE_UPLOAD_PERMISSIONS setting: {getattr(settings, 'FILE_UPLOAD_PERMISSIONS', 'Not set')}\")\n        \n        mock_file.close()\n        cleanup_file(saved_path)\n        cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            large_content = b\"y\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"test2.txt\")\n            saved_name = storage.save(\"test2.txt\", mock_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"TemporaryUploadedFile permissions with 0o644: {final_permissions}\")\n            print(f\"Expected: 0o644, Got: {final_permissions}, Match: {final_permissions == '0o644'}\")\n            \n            mock_file.close()\n            cleanup_file(saved_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"restrictive content\"\n            simple_file = SimpleUploadedFile(\"test3.txt\", content)\n            \n            saved_name = storage.save(\"test3.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Restrictive permissions (0o600): {final_permissions}\")\n            print(f\"Expected: 0o600, Got: {final_permissions}, Match: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            \n            content = b\"permissive content\"\n            simple_file = SimpleUploadedFile(\"test4.txt\", content)\n            \n            saved_name = storage.save(\"test4.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissive permissions (0o755): {final_permissions}\")\n            print(f\"Expected: 0o755, Got: {final_permissions}, Match: {final_permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Test SimpleUploadedFile\n            simple_content = b\"simple content\"\n            simple_file = SimpleUploadedFile(\"simple.txt\", simple_content)\n            simple_saved = storage.save(\"simple.txt\", simple_file)\n            simple_path = storage.path(simple_saved)\n            simple_permissions = oct(os.stat(simple_path).st_mode & 0o777)\n            \n            # Test TemporaryUploadedFile simulation\n            temp_content = b\"z\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(temp_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"temp.txt\")\n            temp_saved = storage.save(\"temp.txt\", mock_file)\n            temp_path = storage.path(temp_saved)\n            temp_permissions = oct(os.stat(temp_path).st_mode & 0o777)\n            \n            print(f\"SimpleUploadedFile permissions: {simple_permissions}\")\n            print(f\"TemporaryUploadedFile permissions: {temp_permissions}\")\n            print(f\"Permissions consistent: {simple_permissions == temp_permissions}\")\n            \n            mock_file.close()\n            cleanup_file(simple_path)\n            cleanup_file(temp_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=None):\n            storage = FileSystemStorage()\n            \n            content = b\"null permission content\"\n            simple_file = SimpleUploadedFile(\"test6.txt\", content)\n            \n            saved_name = storage.save(\"test6.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissions with None setting: {final_permissions}\")\n            print(f\"FILE_UPLOAD_PERMISSIONS: {settings.FILE_UPLOAD_PERMISSIONS}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test custom FileSystemStorage with file_permissions_mode override\")\n    print(\"Output:\")\n    \n    try:\n        # Test storage-level permission override\n        custom_storage = FileSystemStorage(file_permissions_mode=0o600)\n        \n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            content = b\"custom storage content\"\n            simple_file = SimpleUploadedFile(\"test7.txt\", content)\n            \n            saved_name = custom_storage.save(\"test7.txt\", simple_file)\n            saved_path = custom_storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Storage-level override permissions: {final_permissions}\")\n            print(f\"Global setting: 0o644, Storage override: 0o600\")\n            print(f\"Uses storage override: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test edge case with zero-byte file\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Zero-byte file\n            empty_content = b\"\"\n            empty_file = SimpleUploadedFile(\"empty.txt\", empty_content)\n            \n            saved_name = storage.save(\"empty.txt\", empty_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            file_size = final_stat.st_size\n            \n            print(f\"Zero-byte file permissions: {final_permissions}\")\n            print(f\"File size: {file_size} bytes\")\n            print(f\"Permissions set correctly: {final_permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions without setting: 0o644\nFILE_UPLOAD_PERMISSIONS setting: None\n\n### Test 2:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions with 0o644: 0o644\nExpected: 0o644, Got: 0o644, Match: True\n\n### Test 3:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\nOutput:\nRestrictive permissions (0o600): 0o600\nExpected: 0o600, Got: 0o600, Match: True\n\n### Test 4:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\nOutput:\nPermissive permissions (0o755): 0o755\nExpected: 0o755, Got: 0o755, Match: True\n\n### Test 5:\nInput:\nTest consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\nOutput:\nSimpleUploadedFile permissions: 0o644\nTemporaryUploadedFile permissions: 0o644\nPermissions consistent: True\n\n### Test 6:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\nOutput:\nPermissions with None setting: 0o644\nFILE_UPLOAD_PERMISSIONS: None\n\n### Test 7:\nInput:\nTest custom FileSystemStorage with file_permissions_mode override\nOutput:\nStorage-level override permissions: 0o600\nGlobal setting: 0o644, Storage override: 0o600\nUses storage override: True\n\n### Test 8:\nInput:\nTest edge case with zero-byte file\nOutput:\nZero-byte file permissions: 0o644\nFile size: 0 bytes\nPermissions set correctly: True\n\n", "stderr": ""}]}
{"patch_content": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..6016ea79f6 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,12 +304,14 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+# Defaults to 0o644 (readable by owner, group, and others; writable by owner only).\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n # see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\n+# Defaults to 0o755 (readable and executable by all; writable by owner only).\n+FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755\n \n # Python module path where user will place custom format definition.\n # The directory where this setting is pointing should contain subdirectories\n", "repro_stdout": "### Test 1:\nInput:\nRegular file creation to show baseline permissions\nOutput:\nRegular file permissions: 0o664\n\n### Test 2:\nInput:\nNamedTemporaryFile creation to show restrictive permissions\nOutput:\nTemp file permissions: 0o600\n\n### Test 3:\nInput:\nSimulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nPermissions preserved from temp: False\n\n### Test 4:\nInput:\nSimulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nExpected permissions: 0o644\nCorrectly set to expected: True\n\n### Test 5:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\nOutput:\nSimpleUploadedFile final permissions: 0o644\nNo temp file involved - uses default file creation permissions\n\n", "repro_stderr": "", "differential_test": [{"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile, InMemoryUploadedFile\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nfrom django.test.utils import override_settings\nfrom io import BytesIO\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5MB default\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely remove files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef get_file_permissions(filepath):\n    \"\"\"Helper to get file permissions\"\"\"\n    try:\n        stat_info = os.stat(filepath)\n        return oct(stat_info.st_mode & 0o777)\n    except:\n        return \"N/A\"\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Small file upload (in-memory) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Small file upload (512 bytes) - should use InMemoryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        small_content = b\"x\" * 512  # Small file, should stay in memory\n        small_file = SimpleUploadedFile(\"small_file.txt\", small_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"small_test.txt\", small_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Upload type: InMemoryUploadedFile (small)\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Large file upload (temporary file) without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Large file upload (3MB) - should use TemporaryUploadedFile\")\n    \n    try:\n        storage = FileSystemStorage()\n        large_content = b\"x\" * (3 * 1024 * 1024)  # 3MB file, should go to temp file\n        large_file = SimpleUploadedFile(\"large_file.txt\", large_content, content_type=\"text/plain\")\n        \n        # Simulate what happens with TemporaryUploadedFile\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        temp_permissions = get_file_permissions(temp_file.name)\n        \n        # Now save it through storage\n        with open(temp_file.name, 'rb') as f:\n            saved_name = storage.save(\"large_test.txt\", f)\n            saved_path = storage.path(saved_name)\n        \n        final_permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Upload type: TemporaryUploadedFile (large)\")\n        \n        cleanup_file(temp_file.name)\n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: FILE_UPLOAD_PERMISSIONS set to 0o644\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            content = b\"test content with permissions\"\n            test_file = SimpleUploadedFile(\"perm_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"perm_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: FILE_UPLOAD_PERMISSIONS set to 0o600 (restrictive)\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            content = b\"restrictive permissions test\"\n            test_file = SimpleUploadedFile(\"restrictive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"restrictive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o600\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: FILE_UPLOAD_PERMISSIONS set to 0o755 (permissive)\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"File upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            content = b\"permissive permissions test\"\n            test_file = SimpleUploadedFile(\"permissive_test.txt\", content, content_type=\"text/plain\")\n            \n            saved_name = storage.save(\"permissive_test.txt\", test_file)\n            saved_path = storage.path(saved_name)\n            \n            permissions = get_file_permissions(saved_path)\n            \n            print(\"Output:\")\n            print(f\"Expected permissions: 0o755\")\n            print(f\"Actual permissions: {permissions}\")\n            print(f\"Permissions match expected: {permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: Empty file upload\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Empty file upload - edge case\")\n    \n    try:\n        storage = FileSystemStorage()\n        empty_content = b\"\"\n        empty_file = SimpleUploadedFile(\"empty_file.txt\", empty_content, content_type=\"text/plain\")\n        \n        saved_name = storage.save(\"empty_test.txt\", empty_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Empty file handled successfully: {file_size == 0}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Binary file upload\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Binary file upload (simulated image data)\")\n    \n    try:\n        storage = FileSystemStorage()\n        # Simulate binary image data\n        binary_content = bytes([i % 256 for i in range(1024)])  # 1KB of binary data\n        binary_file = SimpleUploadedFile(\"test_image.jpg\", binary_content, content_type=\"image/jpeg\")\n        \n        saved_name = storage.save(\"binary_test.jpg\", binary_file)\n        saved_path = storage.path(saved_name)\n        \n        permissions = get_file_permissions(saved_path)\n        file_size = os.path.getsize(saved_path)\n        \n        print(\"Output:\")\n        print(f\"File size: {file_size} bytes\")\n        print(f\"File permissions: {permissions}\")\n        print(f\"Content type: image/jpeg\")\n        print(f\"Binary file handled successfully: {file_size == 1024}\")\n        \n        cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Consistency test between small and large files\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Consistency test: comparing permissions between small and large files\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Small file\n            small_content = b\"small\" * 100  # 500 bytes\n            small_file = SimpleUploadedFile(\"small_consistency.txt\", small_content, content_type=\"text/plain\")\n            small_saved = storage.save(\"small_consistency.txt\", small_file)\n            small_path = storage.path(small_saved)\n            small_permissions = get_file_permissions(small_path)\n            \n            # Large file (simulated temporary file behavior)\n            large_content = b\"large\" * 100000  # ~500KB\n            large_file = SimpleUploadedFile(\"large_consistency.txt\", large_content, content_type=\"text/plain\")\n            large_saved = storage.save(\"large_consistency.txt\", large_file)\n            large_path = storage.path(large_saved)\n            large_permissions = get_file_permissions(large_path)\n            \n            print(\"Output:\")\n            print(f\"Small file permissions: {small_permissions}\")\n            print(f\"Large file permissions: {large_permissions}\")\n            print(f\"Permissions are consistent: {small_permissions == large_permissions}\")\n            print(f\"Both match expected 0o644: {small_permissions == '0o644' and large_permissions == '0o644'}\")\n            \n            cleanup_file(small_path)\n            cleanup_file(large_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nSmall file upload (512 bytes) - should use InMemoryUploadedFile\nOutput:\nFile size: 512 bytes\nFile permissions: 0o644\nUpload type: InMemoryUploadedFile (small)\n\n### Test 2:\nInput:\nLarge file upload (3MB) - should use TemporaryUploadedFile\nOutput:\nFile size: 3145728 bytes\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nUpload type: TemporaryUploadedFile (large)\n\n### Test 3:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nExpected permissions: 0o644\nActual permissions: 0o644\nPermissions match expected: True\n\n### Test 4:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o600 (restrictive)\nOutput:\nExpected permissions: 0o600\nActual permissions: 0o600\nPermissions match expected: True\n\n### Test 5:\nInput:\nFile upload with FILE_UPLOAD_PERMISSIONS=0o755 (permissive)\nOutput:\nExpected permissions: 0o755\nActual permissions: 0o755\nPermissions match expected: True\n\n### Test 6:\nInput:\nEmpty file upload - edge case\nOutput:\nFile size: 0 bytes\nFile permissions: 0o644\nEmpty file handled successfully: True\n\n### Test 7:\nInput:\nBinary file upload (simulated image data)\nOutput:\nFile size: 1024 bytes\nFile permissions: 0o644\nContent type: image/jpeg\nBinary file handled successfully: True\n\n### Test 8:\nInput:\nConsistency test: comparing permissions between small and large files\nOutput:\nSmall file permissions: 0o644\nLarge file permissions: 0o644\nPermissions are consistent: True\nBoth match expected 0o644: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\nimport django\nfrom io import BytesIO\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=2621440,  # 2.5 MB default\n    )\n\ndjango.setup()\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    # Test 1: Default behavior - no FILE_UPLOAD_PERMISSIONS setting\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default behavior without FILE_UPLOAD_PERMISSIONS setting\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Small file (uses SimpleUploadedFile/MemoryFileUploadHandler)\n        small_content = b\"small file content\"\n        small_file = SimpleUploadedFile(\"small.txt\", small_content)\n        small_saved = storage.save(\"small.txt\", small_file)\n        small_path = storage.path(small_saved)\n        small_perms = oct(os.stat(small_path).st_mode & 0o777)\n        \n        # Large file simulation (uses TemporaryUploadedFile)\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        large_content = b\"large file content\" * 1000\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        with open(temp_file.name, 'rb') as f:\n            temp_upload = TemporaryUploadedFile(\"large.txt\", \"text/plain\", len(large_content), \"utf-8\")\n            temp_upload.file = f\n            temp_upload.temporary_file_path = temp_file.name\n            large_saved = storage.save(\"large.txt\", temp_upload)\n            large_path = storage.path(large_saved)\n            large_perms = oct(os.stat(large_path).st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Small file permissions: {small_perms}\")\n        print(f\"Large file permissions: {large_perms}\")\n        print(f\"Permissions consistent: {small_perms == large_perms}\")\n        \n        # Cleanup\n        for path in [small_path, large_path, temp_file.name]:\n            if os.path.exists(path):\n                os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Explicit FILE_UPLOAD_PERMISSIONS=0o644\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 644 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test644.txt\", content)\n            saved_name = storage.save(\"test644.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Correct: {permissions == '0o644'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: Restrictive permissions FILE_UPLOAD_PERMISSIONS=0o600\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test with restrictive FILE_UPLOAD_PERMISSIONS=0o600\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 600 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test600.txt\", content)\n            saved_name = storage.save(\"test600.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o600\")\n            print(f\"Correct: {permissions == '0o600'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: Permissive permissions FILE_UPLOAD_PERMISSIONS=0o666\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test with permissive FILE_UPLOAD_PERMISSIONS=0o666\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o666):\n            storage = FileSystemStorage()\n            \n            content = b\"test content for 666 permissions\"\n            uploaded_file = SimpleUploadedFile(\"test666.txt\", content)\n            saved_name = storage.save(\"test666.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o666\")\n            print(f\"Correct: {permissions == '0o666'}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: File size threshold testing - small file under memory limit\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # File smaller than threshold (should use memory handler)\n            small_content = b\"x\" * 512  # 512 bytes < 1024\n            small_file = SimpleUploadedFile(\"small_threshold.txt\", small_content)\n            saved_name = storage.save(\"small_threshold.txt\", small_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(small_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses memory handler: {len(small_content) < 1024}\")\n            \n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 6: File size threshold testing - large file over memory limit\n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644, FILE_UPLOAD_MAX_MEMORY_SIZE=1024):\n            storage = FileSystemStorage()\n            \n            # Create a temporary file larger than threshold\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            large_content = b\"x\" * 2048  # 2048 bytes > 1024\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            # Simulate temporary file upload\n            with open(temp_file.name, 'rb') as f:\n                temp_upload = TemporaryUploadedFile(\"large_threshold.txt\", \"text/plain\", len(large_content), \"utf-8\")\n                temp_upload.file = f\n                temp_upload.temporary_file_path = temp_file.name\n                saved_name = storage.save(\"large_threshold.txt\", temp_upload)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"File size: {len(large_content)} bytes\")\n            print(f\"Memory threshold: 1024 bytes\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Uses temporary handler: {len(large_content) > 1024}\")\n            \n            # Cleanup\n            for path in [saved_path, temp_file.name]:\n                if os.path.exists(path):\n                    os.remove(path)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 7: Multiple files with different sizes\n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test multiple files of different sizes with consistent permissions\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            files_data = [\n                (\"tiny.txt\", b\"tiny\"),\n                (\"small.txt\", b\"small\" * 100),\n                (\"medium.txt\", b\"medium\" * 1000),\n            ]\n            \n            results = []\n            for filename, content in files_data:\n                uploaded_file = SimpleUploadedFile(filename, content)\n                saved_name = storage.save(filename, uploaded_file)\n                saved_path = storage.path(saved_name)\n                permissions = oct(os.stat(saved_path).st_mode & 0o777)\n                results.append((filename, len(content), permissions))\n                \n                if os.path.exists(saved_path):\n                    os.remove(saved_path)\n            \n            print(\"Output:\")\n            for filename, size, perms in results:\n                print(f\"{filename}: {size} bytes, permissions: {perms}\")\n            \n            all_same = len(set(perms for _, _, perms in results)) == 1\n            print(f\"All permissions consistent: {all_same}\")\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 8: Custom storage location with permissions\n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test custom storage location with FILE_UPLOAD_PERMISSIONS\")\n    \n    try:\n        custom_dir = tempfile.mkdtemp()\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage(location=custom_dir)\n            \n            content = b\"content for custom storage location\"\n            uploaded_file = SimpleUploadedFile(\"custom_storage.txt\", content)\n            saved_name = storage.save(\"custom_storage.txt\", uploaded_file)\n            saved_path = storage.path(saved_name)\n            permissions = oct(os.stat(saved_path).st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Custom storage directory: {custom_dir}\")\n            print(f\"File permissions: {permissions}\")\n            print(f\"Expected: 0o644\")\n            print(f\"Storage location works: {os.path.dirname(saved_path) == custom_dir}\")\n            \n            # Cleanup\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(custom_dir):\n                os.rmdir(custom_dir)\n                \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n        # Cleanup on error\n        if 'custom_dir' in locals() and os.path.exists(custom_dir):\n            try:\n                shutil.rmtree(custom_dir)\n            except:\n                pass\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Final cleanup\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default behavior without FILE_UPLOAD_PERMISSIONS setting\nOutput:\nError: 'str' object is not callable\n\n### Test 2:\nInput:\nTest with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nFile permissions: 0o644\nExpected: 0o644\nCorrect: True\n\n### Test 3:\nInput:\nTest with restrictive FILE_UPLOAD_PERMISSIONS=0o600\nOutput:\nFile permissions: 0o600\nExpected: 0o600\nCorrect: True\n\n### Test 4:\nInput:\nTest with permissive FILE_UPLOAD_PERMISSIONS=0o666\nOutput:\nFile permissions: 0o666\nExpected: 0o666\nCorrect: True\n\n### Test 5:\nInput:\nTest small file under FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nFile size: 512 bytes\nMemory threshold: 1024 bytes\nFile permissions: 0o644\nUses memory handler: True\n\n### Test 6:\nInput:\nTest large file over FILE_UPLOAD_MAX_MEMORY_SIZE threshold\nOutput:\nError: 'str' object is not callable\n\n### Test 7:\nInput:\nTest multiple files of different sizes with consistent permissions\nOutput:\ntiny.txt: 4 bytes, permissions: 0o644\nsmall.txt: 500 bytes, permissions: 0o644\nmedium.txt: 6000 bytes, permissions: 0o644\nAll permissions consistent: True\n\n### Test 8:\nInput:\nTest custom storage location with FILE_UPLOAD_PERMISSIONS\nOutput:\nCustom storage directory: /tmp/tmp5gfu_vbc\nFile permissions: 0o644\nExpected: 0o644\nStorage location works: True\n\n", "stderr": ""}, {"test": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary files\n    )\n\ndjango.setup()\n\ndef cleanup_file(filepath):\n    \"\"\"Helper to safely cleanup files\"\"\"\n    try:\n        if os.path.exists(filepath):\n            os.remove(filepath)\n    except:\n        pass\n\ndef test_file_upload_permissions():\n    \"\"\"Comprehensive test suite for file upload permissions\"\"\"\n    \n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Test default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        # Test without FILE_UPLOAD_PERMISSIONS set (should use system default)\n        storage = FileSystemStorage()\n        \n        # Create large content to force TemporaryUploadedFile usage\n        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(large_content)\n        temp_file.close()\n        \n        # Simulate TemporaryUploadedFile\n        class MockTemporaryUploadedFile:\n            def __init__(self, temp_path, name):\n                self.temporary_file_path = temp_path\n                self.name = name\n                self._file = open(temp_path, 'rb')\n            \n            def read(self, size=-1):\n                return self._file.read(size)\n            \n            def close(self):\n                self._file.close()\n        \n        mock_file = MockTemporaryUploadedFile(temp_file.name, \"test1.txt\")\n        saved_name = storage.save(\"test1.txt\", mock_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(f\"TemporaryUploadedFile permissions without setting: {final_permissions}\")\n        print(f\"FILE_UPLOAD_PERMISSIONS setting: {getattr(settings, 'FILE_UPLOAD_PERMISSIONS', 'Not set')}\")\n        \n        mock_file.close()\n        cleanup_file(saved_path)\n        cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            large_content = b\"y\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(large_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"test2.txt\")\n            saved_name = storage.save(\"test2.txt\", mock_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"TemporaryUploadedFile permissions with 0o644: {final_permissions}\")\n            print(f\"Expected: 0o644, Got: {final_permissions}, Match: {final_permissions == '0o644'}\")\n            \n            mock_file.close()\n            cleanup_file(saved_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o600):\n            storage = FileSystemStorage()\n            \n            content = b\"restrictive content\"\n            simple_file = SimpleUploadedFile(\"test3.txt\", content)\n            \n            saved_name = storage.save(\"test3.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Restrictive permissions (0o600): {final_permissions}\")\n            print(f\"Expected: 0o600, Got: {final_permissions}, Match: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o755):\n            storage = FileSystemStorage()\n            \n            content = b\"permissive content\"\n            simple_file = SimpleUploadedFile(\"test4.txt\", content)\n            \n            saved_name = storage.save(\"test4.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissive permissions (0o755): {final_permissions}\")\n            print(f\"Expected: 0o755, Got: {final_permissions}, Match: {final_permissions == '0o755'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"Test consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Test SimpleUploadedFile\n            simple_content = b\"simple content\"\n            simple_file = SimpleUploadedFile(\"simple.txt\", simple_content)\n            simple_saved = storage.save(\"simple.txt\", simple_file)\n            simple_path = storage.path(simple_saved)\n            simple_permissions = oct(os.stat(simple_path).st_mode & 0o777)\n            \n            # Test TemporaryUploadedFile simulation\n            temp_content = b\"z\" * 2048\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            temp_file.write(temp_content)\n            temp_file.close()\n            \n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_file = MockTemporaryUploadedFile(temp_file.name, \"temp.txt\")\n            temp_saved = storage.save(\"temp.txt\", mock_file)\n            temp_path = storage.path(temp_saved)\n            temp_permissions = oct(os.stat(temp_path).st_mode & 0o777)\n            \n            print(f\"SimpleUploadedFile permissions: {simple_permissions}\")\n            print(f\"TemporaryUploadedFile permissions: {temp_permissions}\")\n            print(f\"Permissions consistent: {simple_permissions == temp_permissions}\")\n            \n            mock_file.close()\n            cleanup_file(simple_path)\n            cleanup_file(temp_path)\n            cleanup_file(temp_file.name)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 6:\")\n    print(\"Input:\")\n    print(\"Test FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=None):\n            storage = FileSystemStorage()\n            \n            content = b\"null permission content\"\n            simple_file = SimpleUploadedFile(\"test6.txt\", content)\n            \n            saved_name = storage.save(\"test6.txt\", simple_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Permissions with None setting: {final_permissions}\")\n            print(f\"FILE_UPLOAD_PERMISSIONS: {settings.FILE_UPLOAD_PERMISSIONS}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 7:\")\n    print(\"Input:\")\n    print(\"Test custom FileSystemStorage with file_permissions_mode override\")\n    print(\"Output:\")\n    \n    try:\n        # Test storage-level permission override\n        custom_storage = FileSystemStorage(file_permissions_mode=0o600)\n        \n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            content = b\"custom storage content\"\n            simple_file = SimpleUploadedFile(\"test7.txt\", content)\n            \n            saved_name = custom_storage.save(\"test7.txt\", simple_file)\n            saved_path = custom_storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(f\"Storage-level override permissions: {final_permissions}\")\n            print(f\"Global setting: 0o644, Storage override: 0o600\")\n            print(f\"Uses storage override: {final_permissions == '0o600'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    print(\"### Test 8:\")\n    print(\"Input:\")\n    print(\"Test edge case with zero-byte file\")\n    print(\"Output:\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Zero-byte file\n            empty_content = b\"\"\n            empty_file = SimpleUploadedFile(\"empty.txt\", empty_content)\n            \n            saved_name = storage.save(\"empty.txt\", empty_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            file_size = final_stat.st_size\n            \n            print(f\"Zero-byte file permissions: {final_permissions}\")\n            print(f\"File size: {file_size} bytes\")\n            print(f\"Permissions set correctly: {final_permissions == '0o644'}\")\n            \n            cleanup_file(saved_path)\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    test_file_upload_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "stdout": "### Test 1:\nInput:\nTest default FILE_UPLOAD_PERMISSIONS behavior with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions without setting: 0o644\nFILE_UPLOAD_PERMISSIONS setting: 420\n\n### Test 2:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o644 with TemporaryUploadedFile\nOutput:\nTemporaryUploadedFile permissions with 0o644: 0o644\nExpected: 0o644, Got: 0o644, Match: True\n\n### Test 3:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o600 (restrictive permissions)\nOutput:\nRestrictive permissions (0o600): 0o600\nExpected: 0o600, Got: 0o600, Match: True\n\n### Test 4:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=0o755 (permissive permissions)\nOutput:\nPermissive permissions (0o755): 0o755\nExpected: 0o755, Got: 0o755, Match: True\n\n### Test 5:\nInput:\nTest consistency between SimpleUploadedFile and TemporaryUploadedFile with same setting\nOutput:\nSimpleUploadedFile permissions: 0o644\nTemporaryUploadedFile permissions: 0o644\nPermissions consistent: True\n\n### Test 6:\nInput:\nTest FILE_UPLOAD_PERMISSIONS=None (explicitly set to None)\nOutput:\nPermissions with None setting: 0o664\nFILE_UPLOAD_PERMISSIONS: None\n\n### Test 7:\nInput:\nTest custom FileSystemStorage with file_permissions_mode override\nOutput:\nStorage-level override permissions: 0o600\nGlobal setting: 0o644, Storage override: 0o600\nUses storage override: True\n\n### Test 8:\nInput:\nTest edge case with zero-byte file\nOutput:\nZero-byte file permissions: 0o644\nFile size: 0 bytes\nPermissions set correctly: True\n\n", "stderr": ""}]}
