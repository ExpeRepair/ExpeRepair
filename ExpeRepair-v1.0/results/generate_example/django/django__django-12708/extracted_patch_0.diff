diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..df8b589c9f 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -408,11 +408,56 @@ class BaseDatabaseSchemaEditor:
             **constraint_kwargs
         )
         if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
-                model._meta.db_table,
-                ", ".join(columns),
-            ))
+            # If we have multiple constraints, try to be more specific
+            # This handles the case where both unique_together and index_together
+            # exist on the same fields
+            if len(constraint_names) > 1:
+                # Get all constraint names without filtering by type
+                all_constraint_names = self._constraint_names(
+                    model, columns, exclude=meta_constraint_names | meta_index_names
+                )
+                # Filter by the specific constraint type we want to delete
+                if 'unique' in constraint_kwargs and constraint_kwargs['unique']:
+                    # For unique constraints, get only unique constraint names
+                    unique_constraint_names = self._constraint_names(
+                        model, columns, exclude=meta_constraint_names | meta_index_names,
+                        unique=True
+                    )
+                    # Remove any that are also indexes to get pure unique constraints
+                    index_constraint_names = self._constraint_names(
+                        model, columns, exclude=meta_constraint_names | meta_index_names,
+                        index=True
+                    )
+                    constraint_names = [name for name in unique_constraint_names 
+                                      if name not in index_constraint_names or 
+                                      not self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, index=True, unique=False)]
+                elif 'index' in constraint_kwargs and constraint_kwargs['index']:
+                    # For index constraints, get only index constraint names  
+                    index_constraint_names = self._constraint_names(
+                        model, columns, exclude=meta_constraint_names | meta_index_names,
+                        index=True
+                    )
+                    # Remove any that are also unique constraints to get pure index constraints
+                    unique_constraint_names = self._constraint_names(
+                        model, columns, exclude=meta_constraint_names | meta_index_names,
+                        unique=True
+                    )
+                    constraint_names = [name for name in index_constraint_names 
+                                      if name not in unique_constraint_names]
+                
+                # If we still don't have exactly one, fall back to original error
+                if len(constraint_names) != 1:
+                    raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
+                        len(constraint_names),
+                        model._meta.db_table,
+                        ", ".join(columns),
+                    ))
+            else:
+                raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
+                    len(constraint_names),
+                    model._meta.db_table,
+                    ", ".join(columns),
+                ))
         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
