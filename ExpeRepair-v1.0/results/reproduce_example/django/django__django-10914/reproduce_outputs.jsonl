{"instance_id": "django__django-10914", "test_content": "import os\nimport tempfile\nimport shutil\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\nimport django\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DEBUG=True,\n        USE_TZ=True,\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': 'test.db',\n            }\n        },\n        INSTALLED_APPS=[\n            'django.contrib.contenttypes',\n            'django.contrib.auth',\n        ],\n        SECRET_KEY='test-secret-key',\n        MEDIA_ROOT=tempfile.mkdtemp(),\n    )\n\ndjango.setup()\n\ndef test_file_permissions():\n    \"\"\"Test file upload permissions consistency\"\"\"\n    \n    # Test 1: Regular file creation (baseline)\n    print(\"### Test 1:\")\n    print(\"Input:\")\n    print(\"Regular file creation to show baseline permissions\")\n    \n    try:\n        regular_file_path = os.path.join(settings.MEDIA_ROOT, \"regular_file.txt\")\n        with open(regular_file_path, 'w') as f:\n            f.write(\"regular file content\")\n        \n        regular_stat = os.stat(regular_file_path)\n        regular_permissions = oct(regular_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Regular file permissions: {regular_permissions}\")\n        \n        # Clean up\n        os.remove(regular_file_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 2: Tempfile permissions (shows the root cause)\n    print(\"### Test 2:\")\n    print(\"Input:\")\n    print(\"NamedTemporaryFile creation to show restrictive permissions\")\n    \n    try:\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        temp_file.write(b\"temp file content\")\n        temp_file.close()\n        \n        temp_stat = os.stat(temp_file.name)\n        temp_permissions = oct(temp_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        \n        # Clean up\n        os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 3: Simulate Django's TemporaryUploadedFile behavior without FILE_UPLOAD_PERMISSIONS\n    print(\"### Test 3:\")\n    print(\"Input:\")\n    print(\"Simulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        # Create a temp file with restrictive permissions (simulating Django's behavior)\n        temp_file = tempfile.NamedTemporaryFile(delete=False)\n        content = b\"simulated temporary upload content\"\n        temp_file.write(content)\n        temp_file.close()\n        \n        temp_stat = os.stat(temp_file.name)\n        temp_permissions = oct(temp_stat.st_mode & 0o777)\n        \n        # Create a custom file-like object that simulates TemporaryUploadedFile\n        class MockTemporaryUploadedFile:\n            def __init__(self, temp_path, name):\n                self.temporary_file_path = temp_path\n                self.name = name\n                self._file = open(temp_path, 'rb')\n            \n            def read(self, size=-1):\n                return self._file.read(size)\n            \n            def close(self):\n                self._file.close()\n        \n        mock_uploaded_file = MockTemporaryUploadedFile(temp_file.name, \"temp_upload.txt\")\n        \n        # Save through FileSystemStorage (this will use os.rename, preserving permissions)\n        saved_name = storage.save(\"temp_upload.txt\", mock_uploaded_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"Temp file permissions: {temp_permissions}\")\n        print(f\"Final file permissions: {final_permissions}\")\n        print(f\"Permissions preserved from temp: {temp_permissions == final_permissions}\")\n        \n        # Clean up\n        mock_uploaded_file.close()\n        if os.path.exists(saved_path):\n            os.remove(saved_path)\n        if os.path.exists(temp_file.name):\n            os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 4: With explicit FILE_UPLOAD_PERMISSIONS setting\n    print(\"### Test 4:\")\n    print(\"Input:\")\n    print(\"Simulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\")\n    \n    try:\n        with override_settings(FILE_UPLOAD_PERMISSIONS=0o644):\n            storage = FileSystemStorage()\n            \n            # Create a temp file with restrictive permissions\n            temp_file = tempfile.NamedTemporaryFile(delete=False)\n            content = b\"permission test content\"\n            temp_file.write(content)\n            temp_file.close()\n            \n            temp_stat = os.stat(temp_file.name)\n            temp_permissions = oct(temp_stat.st_mode & 0o777)\n            \n            # Create mock file object\n            class MockTemporaryUploadedFile:\n                def __init__(self, temp_path, name):\n                    self.temporary_file_path = temp_path\n                    self.name = name\n                    self._file = open(temp_path, 'rb')\n                \n                def read(self, size=-1):\n                    return self._file.read(size)\n                \n                def close(self):\n                    self._file.close()\n            \n            mock_uploaded_file = MockTemporaryUploadedFile(temp_file.name, \"permission_test.txt\")\n            \n            # Save through FileSystemStorage\n            saved_name = storage.save(\"permission_test.txt\", mock_uploaded_file)\n            saved_path = storage.path(saved_name)\n            \n            final_stat = os.stat(saved_path)\n            final_permissions = oct(final_stat.st_mode & 0o777)\n            \n            print(\"Output:\")\n            print(f\"Temp file permissions: {temp_permissions}\")\n            print(f\"Final file permissions: {final_permissions}\")\n            print(f\"Expected permissions: 0o644\")\n            print(f\"Correctly set to expected: {final_permissions == '0o644'}\")\n            \n            # Clean up\n            mock_uploaded_file.close()\n            if os.path.exists(saved_path):\n                os.remove(saved_path)\n            if os.path.exists(temp_file.name):\n                os.remove(temp_file.name)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n    \n    print()\n    \n    # Test 5: SimpleUploadedFile for comparison (in-memory, no temp file)\n    print(\"### Test 5:\")\n    print(\"Input:\")\n    print(\"SimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\")\n    \n    try:\n        storage = FileSystemStorage()\n        \n        content = b\"simple upload content\"\n        simple_file = SimpleUploadedFile(\"simple_upload.txt\", content, content_type=\"text/plain\")\n        \n        # Save through FileSystemStorage\n        saved_name = storage.save(\"simple_upload.txt\", simple_file)\n        saved_path = storage.path(saved_name)\n        \n        final_stat = os.stat(saved_path)\n        final_permissions = oct(final_stat.st_mode & 0o777)\n        \n        print(\"Output:\")\n        print(f\"SimpleUploadedFile final permissions: {final_permissions}\")\n        print(f\"No temp file involved - uses default file creation permissions\")\n        \n        # Clean up\n        if os.path.exists(saved_path):\n            os.remove(saved_path)\n        \n    except Exception as e:\n        print(\"Output:\")\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    test_file_permissions()\n    \n    # Clean up\n    if os.path.exists('test.db'):\n        os.remove('test.db')\n    if os.path.exists(settings.MEDIA_ROOT):\n        shutil.rmtree(settings.MEDIA_ROOT)\n", "reproduce_stdout": "### Test 1:\nInput:\nRegular file creation to show baseline permissions\nOutput:\nRegular file permissions: 0o664\n\n### Test 2:\nInput:\nNamedTemporaryFile creation to show restrictive permissions\nOutput:\nTemp file permissions: 0o600\n\n### Test 3:\nInput:\nSimulate TemporaryUploadedFile upload without FILE_UPLOAD_PERMISSIONS\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o664\nPermissions preserved from temp: False\n\n### Test 4:\nInput:\nSimulate TemporaryUploadedFile upload with FILE_UPLOAD_PERMISSIONS=0o644\nOutput:\nTemp file permissions: 0o600\nFinal file permissions: 0o644\nExpected permissions: 0o644\nCorrectly set to expected: True\n\n### Test 5:\nInput:\nSimpleUploadedFile upload without FILE_UPLOAD_PERMISSIONS (no temp file)\nOutput:\nSimpleUploadedFile final permissions: 0o664\nNo temp file involved - uses default file creation permissions\n\n", "reproduce_stderr": "", "returncode": 0, "reproduced": false, "reproduction-available": "", "test_type": "reproduce"}
