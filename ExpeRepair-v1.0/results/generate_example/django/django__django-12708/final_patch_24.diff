diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..43fdece700 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -400,20 +400,70 @@ class BaseDatabaseSchemaEditor:
             self.execute(self._create_index_sql(model, fields, suffix="_idx"))
 
     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
+        """
+        Delete a composed index (unique_together or index_together).
+        
+        Special handling: When both unique_together and index_together exist on
+        the same fields, we need to filter out the conflicting constraint type
+        to avoid ambiguity during deletion.
+        """
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
+        exclude_names = meta_constraint_names | meta_index_names
+        
+        # Get initial constraint candidates
         constraint_names = self._constraint_names(
-            model, columns, exclude=meta_constraint_names | meta_index_names,
-            **constraint_kwargs
+            model, columns, exclude=exclude_names, **constraint_kwargs
         )
-        if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
-                model._meta.db_table,
-                ", ".join(columns),
-            ))
-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
+        
+        # Handle index deletion with potential unique constraint conflicts
+        if constraint_kwargs.get('index', False):
+            if not constraint_names:
+                # No index found to delete - this is OK for idempotent migrations
+                return
+            
+            if len(constraint_names) > 1:
+                # Filter out unique constraints to avoid conflicts when both
+                # unique_together and index_together exist on same fields
+                unique_constraint_names = self._constraint_names(
+                    model, columns, exclude=exclude_names, unique=True
+                )
+                constraint_names = [name for name in constraint_names 
+                                  if name not in unique_constraint_names]
+        
+        # Handle unique deletion - these typically don't have conflicts
+        elif constraint_kwargs.get('unique', False):
+            if len(constraint_names) > 1:
+                # Filter out pure index constraints to avoid conflicts
+                index_constraint_names = self._constraint_names(
+                    model, columns, exclude=exclude_names, index=True, unique=False
+                )
+                constraint_names = [name for name in constraint_names 
+                                  if name not in index_constraint_names]
+        
+        # Final validation
+        if len(constraint_names) == 0:
+            if constraint_kwargs.get('unique', False):
+                # For unique constraints, not finding any is an error
+                raise ValueError("No unique constraint found for %s(%s)" % (
+                    model._meta.db_table, ", ".join(columns)
+                ))
+            # For index constraints, we already returned early above
+        elif len(constraint_names) != 1:
+            constraint_type = 'index' if constraint_kwargs.get('index', False) else 'unique'
+            raise ValueError(
+                "Found wrong number (%s) of %s constraints for %s(%s). "
+                "Constraints found: %s" % (
+                    len(constraint_names),
+                    constraint_type,
+                    model._meta.db_table,
+                    ", ".join(columns),
+                    ", ".join(constraint_names)
+                )
+            )
+        else:
+            self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
         """Rename the table a model points to."""
