diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..721b6e2791 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -407,12 +407,36 @@ class BaseDatabaseSchemaEditor:
             model, columns, exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs
         )
-        if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
-                model._meta.db_table,
-                ", ".join(columns),
+        
+        # If we found multiple constraints, try to filter by the specific type we need
+        if len(constraint_names) > 1:
+            # Get all unique constraints and all index constraints for these columns
+            unique_constraint_names = set(self._constraint_names(
+                model, columns, exclude=meta_constraint_names | meta_index_names,
+                unique=True
             ))
+            index_constraint_names = set(self._constraint_names(
+                model, columns, exclude=meta_constraint_names | meta_index_names,
+                index=True
+            ))
+            
+            if constraint_kwargs.get('unique'):
+                # For unique_together deletion, only consider unique constraints
+                constraint_names = list(set(constraint_names) & unique_constraint_names)
+            elif constraint_kwargs.get('index'):
+                # For index_together deletion, only consider index constraints that are not unique
+                constraint_names = list(set(constraint_names) & (index_constraint_names - unique_constraint_names))
+        
+        if len(constraint_names) != 1:
+            raise ValueError(
+                "Found wrong number (%s) of constraints for %s(%s). "
+                "Expected exactly 1 constraint, but found: %s" % (
+                    len(constraint_names),
+                    model._meta.db_table,
+                    ", ".join(columns),
+                    constraint_names if constraint_names else "none"
+                )
+            )
         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
