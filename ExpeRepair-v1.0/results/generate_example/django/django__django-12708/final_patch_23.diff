diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..81f12e7537 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -400,6 +400,13 @@ class BaseDatabaseSchemaEditor:
             self.execute(self._create_index_sql(model, fields, suffix="_idx"))
 
     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
+        """
+        Delete a composed index (unique_together or index_together constraint).
+        
+        Special case: if both a unique_together and index_together exist on 
+        the same columns, we filter out the "other" constraint type so we only 
+        drop one backend constraint at a time.
+        """
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
@@ -407,12 +414,42 @@ class BaseDatabaseSchemaEditor:
             model, columns, exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs
         )
+        
+        # Handle overlapping unique_together and index_together on same fields
+        if len(constraint_names) > 1:
+            # If we're looking for an index constraint, filter out unique constraints
+            if constraint_kwargs.get('index', False) and not constraint_kwargs.get('unique', False):
+                unique_constraint_names = self._constraint_names(
+                    model, columns, exclude=meta_constraint_names | meta_index_names,
+                    index=False, unique=True
+                )
+                constraint_names = [name for name in constraint_names if name not in unique_constraint_names]
+            
+            # If we're looking for a unique constraint, filter out non-unique index constraints  
+            elif constraint_kwargs.get('unique', False) and not constraint_kwargs.get('index', False):
+                index_constraint_names = self._constraint_names(
+                    model, columns, exclude=meta_constraint_names | meta_index_names,
+                    index=True, unique=False
+                )
+                constraint_names = [name for name in constraint_names if name not in index_constraint_names]
+        
+        # If we're dropping an index but none exists (e.g., already dropped with unique), skip silently
+        if (constraint_kwargs.get('index', False) and not constraint_kwargs.get('unique', False) 
+                and not constraint_names):
+            return
+            
         if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
-                model._meta.db_table,
-                ", ".join(columns),
-            ))
+            constraint_type = 'index' if constraint_kwargs.get('index', False) else 'unique'
+            names_str = ', '.join(constraint_names) if constraint_names else 'none'
+            raise ValueError(
+                "Found wrong number (%s) of %s constraints for %s(%s): %s" % (
+                    len(constraint_names),
+                    constraint_type,
+                    model._meta.db_table,
+                    ", ".join(columns),
+                    names_str,
+                )
+            )
         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
