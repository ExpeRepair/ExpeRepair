diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..4357215a91 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -408,11 +408,35 @@ class BaseDatabaseSchemaEditor:
             **constraint_kwargs
         )
         if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
-                model._meta.db_table,
-                ", ".join(columns),
-            ))
+            # If we found multiple constraints, try to be more specific about the type
+            if len(constraint_names) > 1:
+                # Filter constraint names to only include the specific type we're looking for
+                if constraint_kwargs.get('unique'):
+                    # For unique constraints, exclude index-only constraints
+                    filtered_names = []
+                    for name in constraint_names:
+                        # Check if this constraint is actually unique (not just an index)
+                        unique_constraints = self._constraint_names(model, columns, unique=True, exclude=meta_constraint_names | meta_index_names)
+                        if name in unique_constraints:
+                            filtered_names.append(name)
+                    constraint_names = filtered_names
+                elif constraint_kwargs.get('index'):
+                    # For index constraints, exclude unique constraints
+                    filtered_names = []
+                    for name in constraint_names:
+                        # Check if this constraint is actually an index (not unique)
+                        unique_constraints = self._constraint_names(model, columns, unique=True, exclude=meta_constraint_names | meta_index_names)
+                        if name not in unique_constraints:
+                            filtered_names.append(name)
+                    constraint_names = filtered_names
+            
+            # If we still don't have exactly one constraint, raise the error
+            if len(constraint_names) != 1:
+                raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
+                    len(constraint_names),
+                    model._meta.db_table,
+                    ", ".join(columns),
+                ))
         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
